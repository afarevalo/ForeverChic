Descuentos$Valor * (-1))
# Cambiar nombre de las variabes para usar Full join
Descuentos <- Descuentos %>% rename(`Fecha de Pago` = Fecha)
Descuentos <- Descuentos %>% rename(`Prestador/Vendedor` = Profesional)
Descuentos <- Descuentos %>% rename(`Servicio/Producto` = Tipo_Concepto)
Descuentos <- Descuentos %>% rename(`Part_profesional` = Valor)
# Elminina la variable
Descuentos <- Descuentos %>% select(-Concepto, -Observación)
# Cambia el formato de la Fecha para usar Full join
Descuentos$`Fecha de Pago` <- as.character(Descuentos$`Fecha de Pago`)
# Convertir la columna 'Fecha de Pago' al formato DD/MM/AAAA y mantenerla como chr
Descuentos <- Descuentos %>%
mutate(`Fecha de Pago` = format(as.Date(`Fecha de Pago`, format = "%Y-%m-%d"), "%d/%m/%Y"))
# Unir las base de datos
Data <- full_join(Data, Descuentos)
#===============================================================================
Data <- Data %>%
mutate(across(c(`Precio de Lista`, `Precio`, `Total`, `Nequi Nambad`,
`Daviplata Nambad`, `Modificado`, `costo_tx`,
`pct_prod`, `val_prod`, `val_neto`, `Part_profesional`,
`Part_salon`), ~replace(., is.na(.), 0)))
# Hay pagos por Nequi y DaviPlata de Nydia
nuevas <- sum(Data$`Nequi Nambad`,Data$`Daviplata Nambad`)
if(nuevas > 0) {
# Descuento de Nequi y DaviPlata de Nydia - Alianza
# Filtrar las filas donde "Nequi Nambad" o "Daviplata Nambad" son mayores a 0
filas_a_duplicar <- Data %>%
filter(`Nequi Nambad` > 0 | `Daviplata Nambad` > 0)
# Crear las nuevas filas con las modificaciones requeridas
nuevas_filas <- filas_a_duplicar %>%
mutate(
`Servicio/Producto` = ifelse(`Prestador/Vendedor` != "Nydia Gamba", paste("Ajuste por Pago Anticipado"), `Servicio/Producto`),
`Prestador/Vendedor` = ifelse(`Prestador/Vendedor` != "Nydia Gamba", "Nydia Gamba", `Prestador/Vendedor`),
`Nombre cliente` = paste(`Nombre cliente`, "(Pago Anticipado)"),
Part_profesional = -1 * (`Nequi Nambad` + `Daviplata Nambad`),
Modificado = 1,
`Precio de Lista` = ifelse(`Prestador/Vendedor` == "Nydia Gamba", NA, `Precio de Lista`),
Precio = ifelse(`Prestador/Vendedor` == "Nydia Gamba", 0, Precio),
Total = ifelse(`Prestador/Vendedor` == "Nydia Gamba", NA, Total),
Tipo = ifelse(`Prestador/Vendedor` == "Nydia Gamba", "Ajuste", Tipo),
costo_tx = ifelse(`Prestador/Vendedor` == "Nydia Gamba", 0, costo_tx),
pct_prod = ifelse(`Prestador/Vendedor` == "Nydia Gamba", 0, pct_prod),
val_prod = ifelse(`Prestador/Vendedor` == "Nydia Gamba", 0, val_prod),
Ayuda = ifelse(`Prestador/Vendedor` == "Nydia Gamba", 0, Ayuda),
val_neto = ifelse(`Prestador/Vendedor` == "Nydia Gamba", 0, val_neto),
Part_salon = ifelse(`Prestador/Vendedor` == "Nydia Gamba", 0, Part_salon)
)
# Añadir las nuevas filas a la base de datos original
Data <- bind_rows(Data, nuevas_filas)
rm(filas_a_duplicar, nuevas_filas, Descuentos)
}
# Elimina las columnas de Nequi Y Daiplata Nydia - Alianza
Data <- Data %>% select(-`Nequi Nambad`, -`Daviplata Nambad`, -`Precio de Lista`, -Total, -Ayuda)
Data$Modificado <- ifelse(Data$`Nombre cliente` == "Ajuste de Producto", 1, Data$Modificado)
# Lo que Nydia le hace a los profesionales
companeros <- read_excel("0. Codigo/Info.xlsx", sheet = "13. Companeros N")
companeros <- as.vector(companeros[[1]])
# Ajuste Compañeros
Data$Part_profesional <- ifelse(Data$`Servicio/Producto` %in% companeros & Data$Modificado == 0 & Data$val_neto > 0,
Data$val_neto *  Parte_Alianza, Data$Part_profesional)
Data$Part_salon <- ifelse(Data$Precio > 0 & Data$Modificado == 0,
Data$Precio -
suppressWarnings(as.numeric(Data$val_prod)) -
suppressWarnings(as.numeric(Data$costo_tx)) -
suppressWarnings(as.numeric(Data$Part_profesional)),
NA)
# Eliminar variables
rm(nuevas, companeros, archivo_descuentos)
View(Data)
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/1. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/2. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/3. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/4. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/5. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/6. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/7. Participación Producto.R")
source("0. Codigo/Codigo por Partes/8. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/9. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
source("0. Codigo/Codigo por Partes/13. Completar Descuentos Fondo.R")
source("0. Codigo/Codigo por Partes/14. Porcentaje de los Profesionales.R")
source("0. Codigo/Codigo por Partes/15. Participación Salón.R")
source("0. Codigo/Codigo por Partes/16. Descuento Ajuste Producto.R")
source("0. Codigo/Codigo por Partes/17. Descuentos Varios a Profesionales.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})#===============================================================================
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/1. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/2. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/3. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/4. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/5. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/6. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/7. Participación Producto.R")
source("0. Codigo/Codigo por Partes/8. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/9. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
source("0. Codigo/Codigo por Partes/13. Completar Descuentos Fondo.R")
source("0. Codigo/Codigo por Partes/14. Porcentaje de los Profesionales.R")
source("0. Codigo/Codigo por Partes/15. Participación Salón.R")
source("0. Codigo/Codigo por Partes/16. Descuento Ajuste Producto.R")
source("0. Codigo/Codigo por Partes/17. Descuentos Varios a Profesionales.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})#===============================================================================
# Lista de Profesionales
Tipo_Profesionales <- read_excel("0. Codigo/Info.xlsx", sheet = "0. Profesionales")
# Crear el Nombre de la carpeta donde se exportaran los resultados
cadena_carpeta <- paste0(". Resultados ", MES1, " ",  MIN, " al ", MES2, " ", MAX, " - ", ANIO)
nombre_carpeta <- paste0(numero_extraido, cadena_carpeta)
# Crear la carpeta de Resultados
ruta_resultados <- file.path(ruta_resultados, nombre_carpeta)
# Verificar si la carpeta existe
if (dir.exists(ruta_resultados)) {
# Eliminar la carpeta existente y su contenido
unlink(ruta_resultados, recursive = TRUE)
}
# Crear una nueva carpeta vacía
dir.create(ruta_resultados, recursive = TRUE, showWarnings = FALSE)
# Filtrar los datos de "Marinela Olaya"
datos_marinela <- Data %>% filter(`Prestador/Vendedor` == "Marinela Olaya")
# Sumar los valores positivos de "Part_profesional"
suma_positivos <- sum(datos_marinela$Part_profesional[datos_marinela$Part_profesional > 0], na.rm = TRUE)
# Sumar los valores negativos de "Part_profesional"
suma_negativos <- sum(datos_marinela$Part_profesional[datos_marinela$Part_profesional < 0], na.rm = TRUE)
# Borrar datos de la cosnsola
cat("\014")
if (suma_positivos >= 900000) {
cat("- Marinela Olaya no necesita Apoyo Económico, pues facturó ",
formatC(suma_positivos, format = "f", big.mark = ",", digits = 2), ".\n")
} else {
# Calcular cuánto apoyo necesita
apoyo_economico <- 900000 - suma_positivos
# Calcular el monto total a pagar incluyendo los descuentos y anticipos
total_pagar_marinela <- 900000 + suma_negativos
cat("- Marinela necesita Apoyo Económico de ",
formatC(apoyo_economico, format = "f", big.mark = ",", digits = 2), "\n",
" Pero con los descuentos y anticipos se le debe pagar",
formatC(total_pagar_marinela, format = "f", big.mark = ",", digits = 2), ".\n")
nueva_fila <- data.frame(
`Nombre cliente` = "Apoyo",
`Servicio/Producto` = "Apoyo",
`Prestador/Vendedor` = "Marinela Olaya",
Tipo = "Apoyo",
Part_profesional = apoyo_economico, # Asegúrate de que 'apoyo_economico' esté definido previamente como numérico
stringsAsFactors = FALSE # Evita la conversión de cadenas a factores
)
# Agregar la nueva fila a la base de datos 'Data'
Data <- rbind(Data, nueva_fila)
Data$`Prestador/Vendedor` <- ifelse(is.na(Data$Identificador) &
is.na(Data$`Fecha de Pago`) &
is.na(Data$Precio), Data$Prestador.Vendedor, Data$`Prestador/Vendedor`)
Data$`Nombre cliente` <- ifelse(is.na(Data$Identificador) &
is.na(Data$`Fecha de Pago`) &
is.na(Data$Precio), Data$Nombre.cliente, Data$`Nombre cliente`)
Data$`Servicio/Producto` <- ifelse(is.na(Data$Identificador) &
is.na(Data$`Fecha de Pago`) &
is.na(Data$Precio), Data$Servicio.Producto, Data$`Servicio/Producto`)
rm(nueva_fila)
Data <- Data %>% select(-Servicio.Producto, -Nombre.cliente, -Prestador.Vendedor)
}
# Cambiar parte Salon
Data$Part_salon <- ifelse(Data$Tipo == "Apoyo", -Data$Part_profesional, Data$Part_salon)
rm(datos_marinela)
rm(Data_Color_unique)
# Filtrar y ajustar las columnas según el tipo de profesional
Data_Spa <- Data %>% select(-costo_tx, -val_prod, -Tipo, -pct_prod, -val_neto, -Part_salon, -Modificado)
Data_Tocador <- Data %>% select(-costo_tx, -pct_prod, -val_neto, -Part_salon, -Modificado)
Data_Alianza <- Data %>% select(-val_prod, -Tipo, -pct_prod, -val_neto, -Part_salon,  -Modificado)
# Concidicional Para val_prod
Data_Tocador$val_prod <- ifelse(Data_Tocador$Tipo == "Colorimetria",
Data_Tocador$val_prod, 0)
Data_Tocador <- Data_Tocador %>% select(-Tipo)
# Crear los vectores dinámicamente
profesionales_tipo <- split(Tipo_Profesionales$Profesional, Tipo_Profesionales$Tipo)
# Asignar los valores a variables individuales
tocador <- profesionales_tipo[["Tocador"]]
alianza <- profesionales_tipo[["Alianza"]]
spa <- profesionales_tipo[["Spa"]]
revisar <- c("Revisar")
# Eliminar variables
rm(profesionales_tipo, Tipo_Profesionales)
# Iterar sobre cada trabajador
for (trabajador in unique(Data$`Prestador/Vendedor`)) {
# Determinar la base de datos a usar
if (trabajador %in% tocador) {
base_datos <- Data_Tocador
} else if (trabajador %in% alianza) {
base_datos <- Data_Alianza
} else if (trabajador %in% spa) {
base_datos <- Data_Spa
} else if (trabajador %in% revisar) {
base_datos <- Data
} else {
next # Ignorar trabajadores que no están en ningún vector
}
# Filtrar los datos para el trabajador actual
datos_trabajador <- base_datos %>% filter(`Prestador/Vendedor` == trabajador)
# Crear un workbook
wb <- createWorkbook()
# Agregar una hoja
addWorksheet(wb, "Datos")
# Escribir los datos en la hoja
writeData(wb, "Datos", datos_trabajador)
# Ajustar automáticamente el ancho de las columnas
setColWidths(wb, sheet = "Datos", cols = 1:ncol(datos_trabajador), widths = "auto")
# Aplicar estilo de negrilla a los encabezados
header_style <- createStyle(textDecoration = "bold", halign = "center", valign = "center")
addStyle(
wb,
sheet = "Datos",
style = header_style,
rows = 1, # Fila 1: Encabezados
cols = 1:ncol(datos_trabajador),
gridExpand = TRUE
)
# Formatear la columna "Part_profesional" como ($ 26.675)
if ("Part_profesional" %in% colnames(datos_trabajador)) {
col_index <- which(colnames(datos_trabajador) == "Part_profesional")
# Formato contable
accounting_style <- createStyle(numFmt = "\"$\" #,##0;[Red]\"$\" -#,##0") # Valores negativos en rojo
addStyle(
wb,
sheet = "Datos",
style = accounting_style,
rows = 2:(nrow(datos_trabajador) + 1),
cols = col_index,
gridExpand = TRUE
)
# Identificar filas con valores negativos en "Part_profesional"
filas_negativas <- which(datos_trabajador$Part_profesional < 0)
# Pintar toda la fila de amarillo en las filas negativas
if (length(filas_negativas) > 0) {
yellow_row_style <- createStyle(fgFill = "#FFFF00") # Fondo amarillo para toda la fila
for (fila in filas_negativas) {
addStyle(
wb,
sheet = "Datos",
style = yellow_row_style,
rows = fila + 1, # +1 porque la primera fila son los encabezados
cols = 1:ncol(datos_trabajador), # Toda la fila
gridExpand = TRUE,
stack = TRUE # Combina estilos existentes
)
}
}
}
# Definir la ruta de guardado del archivo Excel
ruta_archivo <- file.path(ruta_resultados, paste0(trabajador, ".xlsx"))
# Guardar el archivo
saveWorkbook(wb, ruta_archivo, overwrite = TRUE)
}
rm(header_style,datos_trabajador, Data_Alianza, Data_Spa, Data_Tocador, base_datos,accounting_style)
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/1. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/2. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/3. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/4. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/5. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/6. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/7. Participación Producto.R")
source("0. Codigo/Codigo por Partes/8. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/9. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
source("0. Codigo/Codigo por Partes/13. Completar Descuentos Fondo.R")
source("0. Codigo/Codigo por Partes/14. Porcentaje de los Profesionales.R")
source("0. Codigo/Codigo por Partes/15. Participación Salón.R")
source("0. Codigo/Codigo por Partes/16. Descuento Ajuste Producto.R")
source("0. Codigo/Codigo por Partes/17. Descuentos Varios a Profesionales.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})#===============================================================================
# Lista de Profesionales
Tipo_Profesionales <- read_excel("0. Codigo/Info.xlsx", sheet = "0. Profesionales")
# Crear el Nombre de la carpeta donde se exportaran los resultados
cadena_carpeta <- paste0(". Resultados ", MES1, " ",  MIN, " al ", MES2, " ", MAX, " - ", ANIO)
nombre_carpeta <- paste0(numero_extraido, cadena_carpeta)
# Crear la carpeta de Resultados
ruta_resultados <- file.path(ruta_resultados, nombre_carpeta)
# Verificar si la carpeta existe
if (dir.exists(ruta_resultados)) {
# Eliminar la carpeta existente y su contenido
unlink(ruta_resultados, recursive = TRUE)
}
# Crear una nueva carpeta vacía
dir.create(ruta_resultados, recursive = TRUE, showWarnings = FALSE)
# Filtrar los datos de "Marinela Olaya"
datos_marinela <- Data %>% filter(`Prestador/Vendedor` == "Marinela Olaya")
# Sumar los valores positivos de "Part_profesional"
suma_positivos <- sum(datos_marinela$Part_profesional[datos_marinela$Part_profesional > 0], na.rm = TRUE)
# Sumar los valores negativos de "Part_profesional"
suma_negativos <- sum(datos_marinela$Part_profesional[datos_marinela$Part_profesional < 0], na.rm = TRUE)
# Borrar datos de la cosnsola
cat("\014")
if (suma_positivos >= 900000) {
cat("- Marinela Olaya no necesita Apoyo Económico, pues facturó ",
formatC(suma_positivos, format = "f", big.mark = ",", digits = 2), ".\n")
} else {
# Calcular cuánto apoyo necesita
apoyo_economico <- 900000 - suma_positivos
# Calcular el monto total a pagar incluyendo los descuentos y anticipos
total_pagar_marinela <- 900000 + suma_negativos
cat("- Marinela necesita Apoyo Económico de ",
formatC(apoyo_economico, format = "f", big.mark = ",", digits = 2), "\n",
" Pero con los descuentos y anticipos se le debe pagar",
formatC(total_pagar_marinela, format = "f", big.mark = ",", digits = 2), ".\n")
nueva_fila <- data.frame(
`Nombre cliente` = "Apoyo",
`Servicio/Producto` = "Apoyo",
`Prestador/Vendedor` = "Marinela Olaya",
Tipo = "Apoyo",
Part_profesional = apoyo_economico, # Asegúrate de que 'apoyo_economico' esté definido previamente como numérico
stringsAsFactors = FALSE # Evita la conversión de cadenas a factores
)
# Agregar la nueva fila a la base de datos 'Data'
Data <- rbind(Data, nueva_fila)
Data$`Prestador/Vendedor` <- ifelse(is.na(Data$Identificador) &
is.na(Data$`Fecha de Pago`) &
is.na(Data$Precio), Data$Prestador.Vendedor, Data$`Prestador/Vendedor`)
Data$`Nombre cliente` <- ifelse(is.na(Data$Identificador) &
is.na(Data$`Fecha de Pago`) &
is.na(Data$Precio), Data$Nombre.cliente, Data$`Nombre cliente`)
Data$`Servicio/Producto` <- ifelse(is.na(Data$Identificador) &
is.na(Data$`Fecha de Pago`) &
is.na(Data$Precio), Data$Servicio.Producto, Data$`Servicio/Producto`)
rm(nueva_fila)
Data <- Data %>% select(-Servicio.Producto, -Nombre.cliente, -Prestador.Vendedor)
}
# Cambiar parte Salon
Data$Part_salon <- ifelse(Data$Tipo == "Apoyo", -Data$Part_profesional, Data$Part_salon)
rm(datos_marinela)
# Filtrar y ajustar las columnas según el tipo de profesional
Data_Spa <- Data %>% select(-costo_tx, -val_prod, -Tipo, -pct_prod, -val_neto, -Part_salon, -Modificado)
Data_Tocador <- Data %>% select(-costo_tx, -pct_prod, -val_neto, -Part_salon, -Modificado)
Data_Alianza <- Data %>% select(-val_prod, -Tipo, -pct_prod, -val_neto, -Part_salon,  -Modificado)
# Concidicional Para val_prod
Data_Tocador$val_prod <- ifelse(Data_Tocador$Tipo == "Colorimetria",
Data_Tocador$val_prod, 0)
Data_Tocador <- Data_Tocador %>% select(-Tipo)
# Crear los vectores dinámicamente
profesionales_tipo <- split(Tipo_Profesionales$Profesional, Tipo_Profesionales$Tipo)
# Asignar los valores a variables individuales
tocador <- profesionales_tipo[["Tocador"]]
alianza <- profesionales_tipo[["Alianza"]]
spa <- profesionales_tipo[["Spa"]]
revisar <- c("Revisar")
# Eliminar variables
rm(profesionales_tipo, Tipo_Profesionales)
# Iterar sobre cada trabajador
for (trabajador in unique(Data$`Prestador/Vendedor`)) {
# Determinar la base de datos a usar
if (trabajador %in% tocador) {
base_datos <- Data_Tocador
} else if (trabajador %in% alianza) {
base_datos <- Data_Alianza
} else if (trabajador %in% spa) {
base_datos <- Data_Spa
} else if (trabajador %in% revisar) {
base_datos <- Data
} else {
next # Ignorar trabajadores que no están en ningún vector
}
# Filtrar los datos para el trabajador actual
datos_trabajador <- base_datos %>% filter(`Prestador/Vendedor` == trabajador)
# Crear un workbook
wb <- createWorkbook()
# Agregar una hoja
addWorksheet(wb, "Datos")
# Escribir los datos en la hoja
writeData(wb, "Datos", datos_trabajador)
# Ajustar automáticamente el ancho de las columnas
setColWidths(wb, sheet = "Datos", cols = 1:ncol(datos_trabajador), widths = "auto")
# Aplicar estilo de negrilla a los encabezados
header_style <- createStyle(textDecoration = "bold", halign = "center", valign = "center")
addStyle(
wb,
sheet = "Datos",
style = header_style,
rows = 1, # Fila 1: Encabezados
cols = 1:ncol(datos_trabajador),
gridExpand = TRUE
)
# Formatear la columna "Part_profesional" como ($ 26.675)
if ("Part_profesional" %in% colnames(datos_trabajador)) {
col_index <- which(colnames(datos_trabajador) == "Part_profesional")
# Formato contable
accounting_style <- createStyle(numFmt = "\"$\" #,##0;[Red]\"$\" -#,##0") # Valores negativos en rojo
addStyle(
wb,
sheet = "Datos",
style = accounting_style,
rows = 2:(nrow(datos_trabajador) + 1),
cols = col_index,
gridExpand = TRUE
)
# Identificar filas con valores negativos en "Part_profesional"
filas_negativas <- which(datos_trabajador$Part_profesional < 0)
# Pintar toda la fila de amarillo en las filas negativas
if (length(filas_negativas) > 0) {
yellow_row_style <- createStyle(fgFill = "#FFFF00") # Fondo amarillo para toda la fila
for (fila in filas_negativas) {
addStyle(
wb,
sheet = "Datos",
style = yellow_row_style,
rows = fila + 1, # +1 porque la primera fila son los encabezados
cols = 1:ncol(datos_trabajador), # Toda la fila
gridExpand = TRUE,
stack = TRUE # Combina estilos existentes
)
}
}
}
# Definir la ruta de guardado del archivo Excel
ruta_archivo <- file.path(ruta_resultados, paste0(trabajador, ".xlsx"))
# Guardar el archivo
saveWorkbook(wb, ruta_archivo, overwrite = TRUE)
}
rm(header_style,datos_trabajador, Data_Alianza, Data_Spa, Data_Tocador, base_datos,accounting_style)
rm(yellow_row_style)
View(Data)
#===============================================================================
# Limpiar el entorno
rm(list = ls())
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#==============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/1. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/2. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/3. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/4. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/5. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/6. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/7. Participación Producto.R")
source("0. Codigo/Codigo por Partes/8. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/9. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
source("0. Codigo/Codigo por Partes/13. Completar Descuentos Fondo.R")
source("0. Codigo/Codigo por Partes/14. Porcentaje de los Profesionales.R")
source("0. Codigo/Codigo por Partes/15. Participación Salón.R")
source("0. Codigo/Codigo por Partes/16. Descuento Ajuste Producto.R")
source("0. Codigo/Codigo por Partes/17. Descuentos Varios a Profesionales.R")
source("0. Codigo/Codigo por Partes/18. Exportar Resultados.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
#===============================================================================
# Reporte Final
#===============================================================================
# Data
Data$Precio <- ifelse(Data$Modificado == 1, 0,Data$Precio)
Data <- Data %>% select(-Modificado)
# Exportar Data del Consolidado
write_xlsx(Data, file.path(ruta_resultados, "0. Consolidado.xlsx"))
# Crear el reporte agrupando por trabajador y sumando la variable "Part_profesional"
reporte <- Data %>%
group_by(`Prestador/Vendedor`) %>%
summarise(Total_a_pagar = sum(Part_profesional, na.rm = TRUE)) %>%
arrange(desc(Total_a_pagar)) # Ordenar por el total a pagar de mayor a menor
# Calcula el total de la nomina
total_nomina <- sum(Data$Part_profesional, na.rm = TRUE)
# Imprimir el reporte en la consola
cat("Reporte de Nómina\n")
cat("=================\n")
for (i in 1:nrow(reporte)) {
cat(
paste0(
"- ", reporte$`Prestador/Vendedor`[i],
": Se le debe pagar ",
formatC(reporte$Total_a_pagar[i], format = "f", big.mark = ",", digits = 2), "\n"
)
)
}
cat("=================\n")
cat(paste0("En total de nómina se deben pagar: ",
formatC(total_nomina, format = "f", big.mark = ",", digits = 2), "\n"))
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
