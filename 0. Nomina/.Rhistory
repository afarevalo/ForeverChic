base_datos <- Data_Spa
} else if (trabajador %in% revisar) {
base_datos <- Data
} else {
next # Ignorar trabajadores que no están en ningún vector
}
# Filtrar los datos para el trabajador actual
datos_trabajador <- base_datos %>% filter(`Prestador/Vendedor` == trabajador)
# Crear un workbook
wb <- createWorkbook()
# Agregar una hoja
addWorksheet(wb, "Datos")
# Escribir los datos en la hoja
writeData(wb, "Datos", datos_trabajador)
# Identificar filas con valores negativos en "Part_profesional"
filas_negativas <- which(datos_trabajador$Part_profesional < 0)
# Pintar las celdas de amarillo para filas con valores negativos
if (length(filas_negativas) > 0) {
yellow_style <- createStyle(fgFill = "#FFFF00")
addStyle(
wb,
sheet = "Datos",
style = yellow_style,
rows = filas_negativas + 1, # +1 porque la primera fila son los encabezados
cols = 1:ncol(datos_trabajador),
gridExpand = TRUE
)
}
# Definir la ruta de guardado del archivo Excel
ruta_archivo <- file.path(ruta_resultados, paste0(trabajador, ".xlsx"))
# Guardar el archivo
saveWorkbook(wb, ruta_archivo, overwrite = TRUE)
# Mensaje de confirmación
cat("Archivo guardado para:", trabajador, "en", ruta_archivo, "\n")
}
#===============================================================================
# Armar Consolidado
Data$Porcentaje <- ifelse(is.na(Data$`Nombre cliente`)== FALSE & Data$Part_profesional > 0,
Data$Part_profesional/Data$Precio, NA)
Data <- Data %>% select(-Revisar)
#===============================================================================
# Reporte Final
#===============================================================================
# Crear el reporte agrupando por trabajador y sumando la variable "Part_profesional"
reporte <- Data %>%
group_by(`Prestador/Vendedor`) %>%
summarise(Total_a_pagar = sum(Part_profesional, na.rm = TRUE)) %>%
arrange(desc(Total_a_pagar)) # Ordenar por el total a pagar de mayor a menor
# Calcular el total de nómina
total_nomina <- sum(reporte$Total_a_pagar)
# Imprimir el reporte en la consola
cat("Reporte de Nómina\n")
cat("=================\n")
for (i in 1:nrow(reporte)) {
cat(
paste0(
"- ", reporte$`Prestador/Vendedor`[i],
": Se le debe pagar ",
formatC(reporte$Total_a_pagar[i], format = "f", big.mark = ",", digits = 2), "\n"
)
)
}
cat("=================\n")
cat(paste0("En total de nómina se deben pagar: ",
formatC(total_nomina, format = "f", big.mark = ",", digits = 2), "\n"))
#===============================================================================
# Filtrar los datos de "Marinela Olaya"
datos_marinela <- Data %>% filter(`Prestador/Vendedor` == "Marinela Olaya")
# Sumar los valores positivos de "Part_profesional"
suma_positivos <- sum(datos_marinela$Part_profesional[datos_marinela$Part_profesional > 0], na.rm = TRUE)
# Sumar los valores negativos de "Part_profesional"
suma_negativos <- sum(datos_marinela$Part_profesional[datos_marinela$Part_profesional < 0], na.rm = TRUE)
apoyo_economico <- 0
# Condicional según el valor de los positivos
if (suma_positivos >= 900000) {
cat("- Marinela Olaya no necesita Apoyo Económico, pues facturó ",
formatC(suma_positivos, format = "f", big.mark = ",", digits = 2), ".\n")
} else {
# Calcular cuánto apoyo necesita
apoyo_economico <- 900000 - suma_positivos
# Calcular el monto total a pagar incluyendo los descuentos y anticipos
total_pagar_marinela <- 900000 + suma_negativos
cat("- Marinela necesita Apoyo Económico de ",
formatC(apoyo_economico, format = "f", big.mark = ",", digits = 2), "\n",
" Pero con los descuentos y anticipos se le debe pagar",
formatC(total_pagar_marinela, format = "f", big.mark = ",", digits = 2), ".\n")
# Recalcular el total de nómina considerando el ajuste para Marinela Olaya
suma_mari <- sum(datos_marinela$Part_profesional)
total_nomina <- sum(Data$Part_profesional, na.rm = TRUE) + total_pagar_marinela - suma_mari
cat("- En total de nómina se deben pagar: ",
formatC(total_nomina, format = "f", big.mark = ",", digits = 2), ".\n")
}
#===============================================================================
# Verificar si apoyo_economico es mayor que 0
if (apoyo_economico > 0) {
# Crear una nueva fila con los nombres exactos de las columnas
nueva_fila <- Data[1, ]  # Copiar la estructura de la base de datos
nueva_fila[] <- NA  # Limpiar los valores
# Asignar los valores deseados a las columnas específicas
nueva_fila$`Prestador/Vendedor` <- "Marinela Olaya"
nueva_fila$Part_profesional <- apoyo_economico
nueva_fila$`Servicio/Producto` <- "Apoyo Económico"
# Agregar la nueva fila a la base de datos
Data <- bind_rows(Data, nueva_fila)
}
#===============================================================================
# Exportar Data del Consolidado
write_xlsx(Data, file.path("C:/Users/windows/Documents/GitHub/Problem_Set_1/ForeverChic/3. Resultados",
nombre_carpeta, "0. Consolidado.xlsx"))
#===============================================================================
Data_marinela <- Data %>% filter(`Prestador/Vendedor` == "Marinela Olaya")
Data_marinela <- Data_marinela %>% select(-"Prestador/Vendedor", -Tipo, -Porc_trans, -Cost_trans,
-Porc_producto, -Valor_producto, -Valor_Neto, -Porcentaje)
# Verificar la condición de apoyo_economico
if (apoyo_economico > 0) {
# Crear y configurar el archivo Excel
wb <- createWorkbook()
addWorksheet(wb, "Marinela Olaya")
writeData(wb, "Marinela Olaya", Data_marinela)
# Crear estilo amarillo
estilo_amarillo <- createStyle(fgFill = "#FFFF00")
# Aplicar estilo a las filas donde Part_profesional es negativo
filas_amarillas <- which(Data_marinela$Part_profesional < 0)
if (length(filas_amarillas) > 0) {
addStyle(wb, "Marinela Olaya", style = estilo_amarillo,
rows = filas_amarillas + 1, cols = 1:ncol(Data_marinela), gridExpand = TRUE)
}
# Guardar el archivo
saveWorkbook(wb, file.path("C:/Users/windows/Documents/GitHub/Problem_Set_1/ForeverChic/3. Resultados",
nombre_carpeta, "Marinela Olaya.xlsx"), overwrite = TRUE)
cat("Archivo Excel exportado correctamente.\n")
} else {
cat("No se ejecutó el código porque apoyo_economico es menor o igual a 0.\n")
}
View(Data)
# Librerias del Proyecto
library(readxl)
library(dplyr)
library(writexl)
library(rio)
library(openxlsx)
library(stringr)
library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(plotly)
library(shinydashboard)
library(reshape2)
library(ggplot2)
runApp('App.Shiny')
runApp('App.Shiny')
runApp('App.Shiny')
runApp('App.Shiny')
shiny::runApp('App.Shiny')
shiny::runApp('App.Shiny')
install.packages("fastmap")
packageVersion("fastmap")
shiny::runApp('App.Shiny')
#===============================================================================
# Más información sobre la creación de aplicaciones con Shiny aquí:
# https://shiny.posit.co/
#===============================================================================
# APP - Nomina Version 1.0
#===============================================================================
# Limpiar el entorno
# rm(list = ls())
#===============================================================================
# Librerias del Proyecto
library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(plotly)
library(shinydashboard)
library(reshape2)
library(ggplot2)
runApp('App.Shiny')
shiny::runApp('App.Shiny')
# Run the application
shinyApp(ui = ui, server = server)
install.packages("fastmap")
packageVersion("fastmap")
shiny::runApp('App.Shiny')
library(readxl)
ruta_archivo <- read_excel("C:/Users/windows/Downloads/reporte_de_ventas_14722_2024-12-12T17_05_21+00_00.xlsx")
# Leer el archivo
Reporte <- read_excel(ruta_archivo, sheet = "Produccion v2")
View(Reporte)
# Cargar los Datos
# Reporte de ventas
# Ruta del archivo
ruta_archivo <- "~/GitHub/Problem_Set_1/ForeverChic/1. Ventas Mensuales/2. reporte_de_ventas_NOV_16_30.xlsx"
# Leer el archivo
Reporte <- read_excel(ruta_archivo, sheet = "Produccion v2")
View(Reporte)
# Librerias del Proyecto
library(readxl)
library(dplyr)
library(writexl)
library(rio)
library(openxlsx)
library(stringr)
ruta_archivo <- read_excel("C:/Users/windows/Downloads/reporte_de_ventas_14722_2024-12-12T17_05_21+00_00.xlsx")
ruta_archivo <- "C:/Users/windows/Downloads/reporte_de_ventas_14722_2024-12-12T17_05_21+00_00.xlsx"
# Leer el archivo
Reporte <- read_excel(ruta_archivo, sheet = "Produccion v2")
View(Reporte)
# Leer el archivo
Reporte <- read_excel(ruta_archivo, sheet = "Produccion v2")
colnames(Reporte) <- Reporte[1, ]
Reporte <- Reporte[-c(1:1),]
rownames(Reporte) <- NULL
View(Reporte)
str(Reporte)
# Limpiar datos
Data <- Reporte %>% select("Identificador","Fecha de Pago","Nombre cliente",
"Servicio/Producto","Prestador/Vendedor","Precio de Lista",
"Precio","Descuento","Efectivo","Tarjeta de Crédito",
"Tarjeta de Débito","Cheque","Otro","gif card",
"Transferencia Bancaria","Nequi Carlos","Daviplata Carlos",
"Nequi Nambad","Daviplata Nambad","Bold")
View(Reporte)
# Librerias del Proyecto
library(readxl)
library(dplyr)
library(writexl)
library(rio)
library(openxlsx)
library(stringr)
# Input del Usuario
ruta_archivo <- "C:/Users/windows/Downloads/reporte_de_ventas_14722_2024-12-12T17_05_21+00_00.xlsx"
# Leer el archivo
Reporte <- read_excel(ruta_archivo, sheet = "Produccion v2")
# Soluciona el problema de las filas iniciales
colnames(Reporte) <- Reporte[1, ]
Reporte <- Reporte[-c(1:1),]
rownames(Reporte) <- NULL
str(Reporte)
# Limpiar datos
Data <- Reporte %>% select("Identificador","Fecha de Pago","Nombre cliente",
"Servicio/Producto","Prestador/Vendedor","Precio de Lista",
"Precio","Descuento","Efectivo","Tarjeta de Crédito",
"Tarjeta de Débito","Cheque","Otro","gif card",
"Transferencia Bancaria","Nequi Carlos","Daviplata Carlos",
"Nequi Nambad","Daviplata Nambad","Bold")
# Limpiar datos
Data <- Reporte %>% select("Identificador","Fecha de Pago","Nombre cliente",
"Servicio/Producto","Prestador/Vendedor","Precio de Lista",
"Precio","Descuento","Efectivo","Tarjeta de Crédito",
"Tarjeta de Débito","Cheque","Otro","Giftcard",
"Transferencia Bancaria","Nequi Carlos","Daviplata Carlos",
"Nequi Nambad","Daviplata Nambad","Bold")
View(Reporte)
# Librerias del Proyecto
library(readxl)
library(dplyr)
library(writexl)
library(rio)
library(openxlsx)
library(stringr)
# Input del Usuario
ruta_archivo <- "C:/Users/windows/Downloads/reporte_de_ventas_14722_2024-12-12T17_05_21+00_00.xlsx"
# Leer el archivo
Reporte <- read_excel(ruta_archivo, sheet = "Produccion v2")
# Soluciona el problema de las filas iniciales
colnames(Reporte) <- Reporte[1, ]
Reporte <- Reporte[-c(1:1),]
rownames(Reporte) <- NULL
names(Reporte)
# Elimina las columnas de Nequi Y Daiplata Nydia - Alianza
Data <- Data %>% select(-Giftcard)
# Elimina las columnas de Nequi Y Daiplata Nydia - Alianza
Reporte <- Reporte %>% select(-Giftcard)
# Eliminar la primera columna llamada 'Giftcard'
Reporte <- Reporte[, !duplicated(names(Data))]
# Librerias del Proyecto
library(readxl)
library(dplyr)
library(writexl)
library(rio)
library(openxlsx)
library(stringr)
# Input del Usuario
ruta_archivo <- "C:/Users/windows/Downloads/reporte_de_ventas_14722_2024-12-12T17_05_21+00_00.xlsx"
# Leer el archivo
Reporte <- read_excel(ruta_archivo, sheet = "Produccion v2")
# Soluciona el problema de las filas iniciales
colnames(Reporte) <- Reporte[1, ]
Reporte <- Reporte[-c(1:1),]
rownames(Reporte) <- NULL
names(Reporte)
str(Reporte)
# Elimina las columnas de Nequi Y Daiplata Nydia - Alianza
Reporte <- Reporte %>% select(-Giftcard)
# Eliminar la primera columna llamada 'Giftcard'
Reporte <- Reporte[, !duplicated(names(Reporte))]
View(Reporte)
names(Reporte)
# Librerias del Proyecto
library(readxl)
library(dplyr)
library(writexl)
library(rio)
library(openxlsx)
library(stringr)
# Input del Usuario
ruta_archivo <- "C:/Users/windows/Downloads/reporte_de_ventas_14722_2024-12-12T17_05_21+00_00.xlsx"
# Leer el archivo
Reporte <- read_excel(ruta_archivo, sheet = "Produccion v2")
# Soluciona el problema de las filas iniciales
colnames(Reporte) <- Reporte[1, ]
Reporte <- Reporte[-c(1:1),]
rownames(Reporte) <- NULL
names(Reporte)
str(Reporte)
names(Reporte)
# Eliminar la columna con el nombre determinado
Data <- Data[, !names(Data) %in% 24]
# Eliminar la columna con el nombre determinado
Reporte <- Reporte[, !names(Reporte) %in% 24]
names(Reporte)
str(Reporte)
# Librerias del Proyecto
library(readxl)
library(dplyr)
library(writexl)
library(rio)
library(openxlsx)
library(stringr)
# Input del Usuario
ruta_archivo <- "C:/Users/windows/Downloads/reporte_de_ventas_14722_2024-12-12T17_05_21+00_00.xlsx"
# Leer el archivo
Reporte <- read_excel(ruta_archivo, sheet = "Produccion v2")
# Input del Usuario
ruta_archivo <- "C:/Users/windows/Downloads/reporte_de_ventas_14722_2024-12-12T17_39_07+00_00.xlsx"
# Leer el archivo
Reporte <- read_excel(ruta_archivo, sheet = "Produccion v2")
# Soluciona el problema de las filas iniciales
colnames(Reporte) <- Reporte[1, ]
Reporte <- Reporte[-c(1:1),]
rownames(Reporte) <- NULL
names(Reporte)
# Limpiar datos
Data <- Reporte %>% select("Identificador","Fecha de Pago","Nombre cliente",
"Servicio/Producto","Prestador/Vendedor","Precio de Lista",
"Precio","Descuento","Efectivo","Tarjeta de Crédito",
"Tarjeta de Débito","Cheque","Otro","Gift card",
"Transferencia Bancaria","Nequi Carlos","Daviplata Carlos",
"Nequi Nambad","Daviplata Nambad","Bold")
View(Data)
# Librerias del Proyecto
library(readxl)
library(dplyr)
library(writexl)
library(rio)
library(openxlsx)
library(stringr)
# Input del Usuario
ruta_archivo <- "C:/Users/windows/Downloads/reporte_de_ventas_14722_2024-12-12T17_39_07+00_00.xlsx"
# Leer el archivo
Data <- read_excel(ruta_archivo, sheet = "Produccion v2")
# Soluciona el problema de las filas iniciales
colnames(Data) <- Data[1, ]
Data <- Data[-c(1:1),]
rownames(Data) <- NULL
# Limpiar datos
Data <- Data %>% select("Identificador","Fecha de Pago","Nombre cliente",
"Servicio/Producto","Prestador/Vendedor","Precio de Lista",
"Precio","Descuento","Efectivo","Tarjeta de Crédito",
"Tarjeta de Débito","Cheque","Otro","Gift card",
"Transferencia Bancaria","Nequi Carlos","Daviplata Carlos",
"Nequi Nambad","Daviplata Nambad","Bold")
# Librerias del Proyecto
library(readxl)
library(dplyr)
library(writexl)
library(rio)
library(openxlsx)
library(stringr)
# Input del Usuario
ruta_archivo <- "C:/Users/windows/Downloads/reporte_de_ventas_14722_2024-12-12T17_39_07+00_00.xlsx"
# Leer el archivo
Data <- read_excel(ruta_archivo, sheet = "Produccion v2")
# Soluciona el problema de las filas iniciales
colnames(Data) <- Data[1, ]
Data <- Data[-c(1:1),]
rownames(Data) <- NULL
# Limpiar datos
Data <- Data %>% select("Identificador","Fecha de Pago","Nombre cliente",
"Servicio/Producto","Prestador/Vendedor","Precio de Lista",
"Precio","Descuento","Efectivo","Tarjeta de Crédito",
"Tarjeta de Débito","Cheque","Otro","Gift card",
"Transferencia Bancaria","Nequi Carlos","Daviplata Carlos",
"Nequi Nambad","Daviplata Nambad","Bold")
# Eliminar espacios múltiples
Data$`Nombre cliente` <- gsub("\\s+", " ", Data$`Nombre cliente`)
Data$`Prestador/Vendedor` <- gsub("\\s+", " ", Data$`Prestador/Vendedor`)
# Eliminar espacios al inicio y al final, si los hubiera
Data$`Nombre cliente` <- trimws(Data$`Nombre cliente`)
Data$`Prestador/Vendedor` <- trimws(Data$`Prestador/Vendedor`)
# Vector con los nombres de las columnas que deseas convertir
columnas_a_convertir <- c( "Efectivo", "Otro", "Gift card", "Nequi Carlos",
"Daviplata Carlos", "Nequi Nambad", "Daviplata Nambad",
"Tarjeta de Crédito", "Tarjeta de Débito", "Cheque",
"Transferencia Bancaria", "Bold", "Precio",
"Precio de Lista")
# Convertir las columnas seleccionadas a numéricas y reemplazar NA por 0
Data[columnas_a_convertir] <- lapply(Data[columnas_a_convertir], function(columna) {
as.numeric(replace(columna, is.na(columna), 0))
})
View(Data)
names(data)
names(Data)
str(Data)
install.packages("lubridate")
Data$`Fecha de Pago` <- dmy_hms(Data$`Fecha de Pago`)
library(lubridate)
Data$`Fecha de Pago` <- dmy_hms(Data$`Fecha de Pago`)
View(Data)
str(Data)
#===============================================================================
# Codigo para importar la Base de datos de las Ventas
#===============================================================================
# Librerias del Proyecto
library(readxl)
library(dplyr)
library(writexl)
library(rio)
library(openxlsx)
library(stringr)
library(lubridate)
#===============================================================================
# Input del Usuario
ruta_archivo <- "C:/Users/windows/Downloads/reporte_de_ventas_14722_2024-12-12T17_39_07+00_00.xlsx"
# Leer el archivo
Data <- read_excel(ruta_archivo, sheet = "Produccion v2")
# Soluciona el problema de las filas iniciales
colnames(Data) <- Data[1, ]
Data <- Data[-c(1:1),]
rownames(Data) <- NULL
# Limpiar datos
Data <- Data %>% select("Identificador","Fecha de Pago","Nombre cliente",
"Servicio/Producto","Prestador/Vendedor","Precio de Lista",
"Precio","Descuento","Efectivo","Tarjeta de Crédito",
"Tarjeta de Débito","Cheque","Otro","Gift card",
"Transferencia Bancaria","Nequi Carlos","Daviplata Carlos",
"Nequi Nambad","Daviplata Nambad","Bold")
# Eliminar espacios múltiples
Data$`Nombre cliente` <- gsub("\\s+", " ", Data$`Nombre cliente`)
Data$`Prestador/Vendedor` <- gsub("\\s+", " ", Data$`Prestador/Vendedor`)
# Eliminar espacios al inicio y al final, si los hubiera
Data$`Nombre cliente` <- trimws(Data$`Nombre cliente`)
Data$`Prestador/Vendedor` <- trimws(Data$`Prestador/Vendedor`)
#===============================================================================
# Corrección del Tipo de Variable
#===============================================================================
# Vector con los nombres de las columnas que deseas convertir
columnas_a_convertir <- c( "Identificador", "Efectivo", "Otro", "Gift card", "Nequi Carlos",
"Daviplata Carlos", "Nequi Nambad", "Daviplata Nambad",
"Tarjeta de Crédito", "Tarjeta de Débito", "Cheque",
"Transferencia Bancaria", "Bold", "Precio",
"Precio de Lista")
# Convertir las columnas seleccionadas a numéricas y reemplazar NA por 0
Data[columnas_a_convertir] <- lapply(Data[columnas_a_convertir], function(columna) {
as.numeric(replace(columna, is.na(columna), 0))
})
Data$`Fecha de Pago` <- dmy_hm(Data$`Fecha de Pago`)
str(Data)
names(Data)
View(Data)
source("1. Base Ventas")
source("1. Base Ventas.R")
source("1. Base Ventas.r")
source("1. Base Ventas.r")
source("1. Base Ventas.R")
source("APP/1. Base Ventas.R")
str(Data)
names(Data)
# Encuentra la fecha mínima y máxima de la columna "Fecha de Pago"
min_fecha <- min(Data$`Fecha de Pago`)
max_fecha <- max(Data$`Fecha de Pago`)
# Extrae el mes y el día de la fecha mínima y máxima
MES1 <- format(min_fecha, "%m")  # Mes de la fecha mínima
MIN <- format(min_fecha, "%d")   # Día de la fecha mínima
MES2 <- format(max_fecha, "%m")  # Mes de la fecha máxima
MAX <- format(max_fecha, "%d")   # Día de la fecha máxima
# Crea la cadena de texto
cadena_reporte <- paste(". reporte_de_ventas MES", MES1, "/", MIN, " al MES", MES2, "/", MAX)
# Muestra la cadena de texto
print(cadena_reporte)
# Crea la cadena de texto
cadena_reporte <- paste(". reporte_de_ventas ", MES1, "/", MIN, " al ", MES2, "/", MAX)
# Muestra la cadena de texto
print(cadena_reporte)
# Crea la cadena de texto
cadena_reporte <- paste(". reporte_de_ventas", MES1, "/", MIN, "al", MES2, "/", MAX)
# Muestra la cadena de texto
print(cadena_reporte)
# Crea la cadena de texto
cadena_reporte <- paste(". reporte_de_ventas", MES1,"/", MIN, "al", MES2, "/", MAX)
# Muestra la cadena de texto
print(cadena_reporte)
getwd()
directorio <- "C:/Users/windows/Documents/GitHub/Problem_Set_1/ForeverChic/1. Ventas Mensuales"
setwd(directorio)
# Chequeo de los archivos del directorio
dir()
list.files()
directorio <- "1. Ventas Mensuales"
setwd(directorio)
# Chequeo de los archivos del directorio
dir()
list.files()
