tir_arriendo = (1 + irr_m)^12 - 1,
tasa_real    = sum(cf[[1]][cf[[1]] > 0]) / inversion / (n_meses / 12),
dummy_ext    = as.integer(n_meses > plazo_meses)
) %>%
ungroup() %>%
mutate(across(c(tasa_real, tir_arriendo), scales::percent, accuracy = 0.01))
View(df_out)
# ── 2. Tabla maestra de inflación anual por año de inicio ───────────────────────
infl_tbl <- tribble(
~anio_inicio, ~infl_anual,
2023,      0.093,
2024,      0.052
)
View(infl_tbl)
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
library(tidyverse)      # dplyr, tidyr, purrr, readr …
library(lubridate)      # manejo de fechas
library(readxl)         # lectura de .xlsx
library(janitor)        # clean_names()
library(scales)         # percent()
cat("\014")
FILE_PATH     <- "C:/Users/windows/Downloads/HP_TIR.xlsx"
CORTE_COL     <- "jul_de_2025"          # última celda “histórica” con total pagado
CORTE_LIMITE  <- as.Date("2025-08-01")   # <– todo pago antes de esta fecha es histórico
# Inflación anual por año de inicio (añade filas nuevas si hace falta)
infl_tbl <- tribble(
~anio_inicio, ~infl_anual,
2023,         0.093,    # 9,3 %
2024,         0.052     # 5,2 %
)
excel_origin <- as.Date("1899-12-30")    # origen fechas Excel
parse_num <- function(x, loc = locale(grouping_mark = ".", decimal_mark = ",")) {
readr::parse_number(as.character(x), locale = loc)
}
# Inflación mensual equivalente
get_monthly_infl <- function(fecha_ini) {
yr <- year(fecha_ini)
tasa <- infl_tbl |> filter(anio_inicio == yr) |> pull(infl_anual)
if (length(tasa) == 0) tasa <- 0
(1 + tasa)^(1/12) - 1
}
# IRR mensual robusta
irr_mensual <- function(cf) {
fastirr::irr(cf, frequency = 1)   # frecuencia 1 = mensual
}
df_raw <- read_excel(FILE_PATH)
# 3.1  Renombrar columnas-fecha que vienen como “45012” (número Excel)
names(df_raw) <- map_chr(names(df_raw), \(nm) {
if (grepl("^\\d+$", nm)) {
format(as.Date(as.numeric(nm), origin = excel_origin), "%b_de_%Y", locale = "es_ES")
} else nm
})
df_raw <- df_raw |> janitor::clean_names()
# 3.2  Conversión de tipos ------------------------------------------------------
mes_cols <- names(df_raw)[grepl("_de_20\\d{2}$", names(df_raw))]
df <- df_raw |>
mutate(
across(c(fecha_inicio, fecha_fin), as.Date),
inversion = parse_num(inversion),
tasa      = parse_num(tasa)  / 100,   # 1,60 → 0,016
tasa2     = parse_num(tasa2) / 100,
across(all_of(mes_cols), \(x) replace_na(parse_num(x), 0))
)
df_out <- df |>
rowwise() |>
mutate(
#---------------------------------------------------------
# 4.1  Fechas y duración
#---------------------------------------------------------
meses_tot = list(seq(from = fecha_inicio,
to   = fecha_fin - months(1),
by   = "1 month")),
n_meses   = length(meses_tot[[1]]),
#---------------------------------------------------------
# 4.2  Histórico vs futuro
#---------------------------------------------------------
meses_pre = list(meses_tot[[1]][meses_tot[[1]] < CORTE_LIMITE]),
n_pre     = length(meses_pre[[1]]),
# Pago medio “histórico” a prorrata
pago_pre  = if_else(n_pre > 0, get(CORTE_COL) / n_pre, 0),
#---------------------------------------------------------
# 4.3  Inflación mensual del contrato
#---------------------------------------------------------
infl_m    = get_monthly_infl(fecha_inicio),
#---------------------------------------------------------
# 4.4  Vector de flujos de caja
#---------------------------------------------------------
cf = list(c(
-inversion,                           # salida inicial
rep(pago_pre, n_pre),                 # meses históricos
c_across(all_of(mes_cols))            # pagos explícitos (futuro)
)),
irr_m        = irr_mensual(cf),
tir_anual    = (1 + irr_m)^12 - 1,
tasa_real    = sum(cf[[1]][cf[[1]] > 0]) / inversion / (n_meses / 12),
dummy_ext    = as.integer(n_meses > plazo_meses)
) |>
ungroup() |>
mutate(across(c(tasa_real, tir_anual), percent, accuracy = 0.01))
function (..., skipCalls = 0, frame = parent.frame())
install.packages("fastirr")    # elige un CRAN mirror y deja que termine
install.packages("fastirr")    # elige un CRAN mirror y deja que termine
library(fastirr)
install.packages("fastirr", type = "source")  # ahora sí compilará
install.packages("fastirr", type = "source")  # ahora sí compilará
library(tidyverse)
library(lubridate)
library(readxl)
library(janitor)
library(scales)
install.packages("fastirr", type = "source")  # ahora sí compilará
library(fastirr)
cat("\014")
FILE_PATH     <- "C:/Users/windows/Downloads/HP_TIR.xlsx"
CORTE_COL     <- "jul_de_2025"          # última celda “histórica” con total pagado
CORTE_LIMITE  <- as.Date("2025-08-01")   # <– todo pago antes de esta fecha es histórico
# Inflación anual por año de inicio (añade filas nuevas si hace falta)
infl_tbl <- tribble(
~anio_inicio, ~infl_anual,
2023,         0.093,    # 9,3 %
2024,         0.052     # 5,2 %
)
excel_origin <- as.Date("1899-12-30")    # origen fechas Excel
parse_num <- function(x, loc = locale(grouping_mark = ".", decimal_mark = ",")) {
readr::parse_number(as.character(x), locale = loc)
}
# Inflación mensual equivalente
get_monthly_infl <- function(fecha_ini) {
yr <- year(fecha_ini)
tasa <- infl_tbl |> filter(anio_inicio == yr) |> pull(infl_anual)
if (length(tasa) == 0) tasa <- 0
(1 + tasa)^(1/12) - 1
}
# IRR mensual robusta
irr_mensual <- function(cf) {
fastirr::irr(cf, frequency = 1)   # frecuencia 1 = mensual
}
df_raw <- read_excel(FILE_PATH)
# 3.1  Renombrar columnas-fecha que vienen como “45012” (número Excel)
names(df_raw) <- map_chr(names(df_raw), \(nm) {
if (grepl("^\\d+$", nm)) {
format(as.Date(as.numeric(nm), origin = excel_origin), "%b_de_%Y", locale = "es_ES")
} else nm
})
df_raw <- df_raw |> janitor::clean_names()
# 3.2  Conversión de tipos ------------------------------------------------------
mes_cols <- names(df_raw)[grepl("_de_20\\d{2}$", names(df_raw))]
df <- df_raw |>
mutate(
across(c(fecha_inicio, fecha_fin), as.Date),
inversion = parse_num(inversion),
tasa      = parse_num(tasa)  / 100,   # 1,60 → 0,016
tasa2     = parse_num(tasa2) / 100,
across(all_of(mes_cols), \(x) replace_na(parse_num(x), 0))
)
df_out <- df |>
rowwise() |>
mutate(
#---------------------------------------------------------
# 4.1  Fechas y duración
#---------------------------------------------------------
meses_tot = list(seq(from = fecha_inicio,
to   = fecha_fin - months(1),
by   = "1 month")),
n_meses   = length(meses_tot[[1]]),
#---------------------------------------------------------
# 4.2  Histórico vs futuro
#---------------------------------------------------------
meses_pre = list(meses_tot[[1]][meses_tot[[1]] < CORTE_LIMITE]),
n_pre     = length(meses_pre[[1]]),
# Pago medio “histórico” a prorrata
pago_pre  = if_else(n_pre > 0, get(CORTE_COL) / n_pre, 0),
#---------------------------------------------------------
# 4.3  Inflación mensual del contrato
#---------------------------------------------------------
infl_m    = get_monthly_infl(fecha_inicio),
#---------------------------------------------------------
# 4.4  Vector de flujos de caja
#---------------------------------------------------------
cf = list(c(
-inversion,                           # salida inicial
rep(pago_pre, n_pre),                 # meses históricos
c_across(all_of(mes_cols))            # pagos explícitos (futuro)
)),
irr_m        = irr_mensual(cf),
tir_anual    = (1 + irr_m)^12 - 1,
tasa_real    = sum(cf[[1]][cf[[1]] > 0]) / inversion / (n_meses / 12),
dummy_ext    = as.integer(n_meses > plazo_meses)
) |>
ungroup() |>
mutate(across(c(tasa_real, tir_anual), percent, accuracy = 0.01))
#===============================================================================
# 5. RESULTADO FINAL ------------------------------------------------------------
#===============================================================================
df_out
install.packages("remotes")
remotes::install_github("jmather625/fastirr")
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
# Librerias del Proyecto
library(readxl)
library(dplyr)
library(writexl)
library(rio)
library(openxlsx)
library(stringr)
library(lubridate)
library(fs)
library(tidyr)
# Input del Usuario
ruta_archivo <- "C:/Users/windows/Downloads/reporte_de_ventas_14722_2025-07-18T03_45_32+00_00.xlsx"
cat("\014")
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/04. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/05. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/06. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/07. Participación Producto.R")
source("0. Codigo/Codigo por Partes/08. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/09. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
source("0. Codigo/Codigo por Partes/13. Completar Descuentos Fondo.R")
source("0. Codigo/Codigo por Partes/14. Porcentaje de los Profesionales.R")
source("0. Codigo/Codigo por Partes/15. Participación Salón.R")
source("0. Codigo/Codigo por Partes/16. Descuento Ajuste Producto.R")
source("0. Codigo/Codigo por Partes/17. Descuentos Varios a Profesionales.R")
source("0. Codigo/Codigo por Partes/18. Ajuste Partícipes.R")
source("0. Codigo/Codigo por Partes/19. Exportar Resultados.R")
source("0. Codigo/Codigo por Partes/20. Reporte Final.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
# Librerias del Proyecto
library(readxl)
library(dplyr)
library(writexl)
library(rio)
library(openxlsx)
library(stringr)
library(lubridate)
library(fs)
library(tidyr)
# Input del Usuario
ruta_archivo <- "C:/Users/windows/Downloads/reporte_de_ventas_14722_2025-07-18T04_08_46+00_00.xlsx"
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/04. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/05. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/06. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/07. Participación Producto.R")
source("0. Codigo/Codigo por Partes/08. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/09. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
source("0. Codigo/Codigo por Partes/13. Completar Descuentos Fondo.R")
source("0. Codigo/Codigo por Partes/14. Porcentaje de los Profesionales.R")
source("0. Codigo/Codigo por Partes/15. Participación Salón.R")
source("0. Codigo/Codigo por Partes/16. Descuento Ajuste Producto.R")
source("0. Codigo/Codigo por Partes/17. Descuentos Varios a Profesionales.R")
source("0. Codigo/Codigo por Partes/18. Ajuste Partícipes.R")
source("0. Codigo/Codigo por Partes/19. Exportar Resultados.R")
source("0. Codigo/Codigo por Partes/20. Reporte Final.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/04. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/05. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/06. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/07. Participación Producto.R")
source("0. Codigo/Codigo por Partes/08. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/09. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
source("0. Codigo/Codigo por Partes/13. Completar Descuentos Fondo.R")
source("0. Codigo/Codigo por Partes/14. Porcentaje de los Profesionales.R")
source("0. Codigo/Codigo por Partes/15. Participación Salón.R")
source("0. Codigo/Codigo por Partes/16. Descuento Ajuste Producto.R")
source("0. Codigo/Codigo por Partes/17. Descuentos Varios a Profesionales.R")
source("0. Codigo/Codigo por Partes/18. Ajuste Partícipes.R")
source("0. Codigo/Codigo por Partes/19. Exportar Resultados.R")
source("0. Codigo/Codigo por Partes/20. Reporte Final.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/04. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/05. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/06. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/07. Participación Producto.R")
source("0. Codigo/Codigo por Partes/08. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/09. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
source("0. Codigo/Codigo por Partes/13. Completar Descuentos Fondo.R")
source("0. Codigo/Codigo por Partes/14. Porcentaje de los Profesionales.R")
source("0. Codigo/Codigo por Partes/15. Participación Salón.R")
source("0. Codigo/Codigo por Partes/16. Descuento Ajuste Producto.R")
source("0. Codigo/Codigo por Partes/17. Descuentos Varios a Profesionales.R")
source("0. Codigo/Codigo por Partes/18. Ajuste Partícipes.R")
source("0. Codigo/Codigo por Partes/19. Exportar Resultados.R")
source("0. Codigo/Codigo por Partes/20. Reporte Final.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
# Librerias del Proyecto
library(readxl)
library(dplyr)
library(writexl)
library(rio)
library(openxlsx)
library(stringr)
library(lubridate)
library(fs)
library(tidyr)
# Input del Usuario
ruta_archivo <- "C:/Users/windows/Downloads/reporte_de_ventas_Julio.xlsx"
# Inicializar la Variable ´Cambio´
Cambio <- NA
# Intentar cargar la base de datos o retener el error
tryCatch({
# Leer el archivo
Data <- read_excel(ruta_archivo, sheet = "Produccion v2")
Cambio <<- 0
# Soluciona el problema de las filas iniciales
colnames(Data) <- Data[1, ]
Data <- Data[-c(1:1),]
rownames(Data) <- NULL
# Limpiar datos
Data <- Data %>% select("Identificador","Fecha de Pago","Nombre cliente",
"Servicio/Producto","Prestador/Vendedor","Precio de Lista",
"Precio", "Total","Descuento","Efectivo","Tarjeta de Crédito",
"Tarjeta de Débito","Cheque","Otro","Gift card",
"Transferencia Bancaria","Nequi Carlos","Daviplata Carlos",
"Nequi Nambad","Daviplata Nambad","Bold")
# Eliminar espacios múltiples
Data$`Nombre cliente` <- gsub("\\s+", " ", Data$`Nombre cliente`)
Data$`Prestador/Vendedor` <- gsub("\\s+", " ", Data$`Prestador/Vendedor`)
# Eliminar espacios al inicio y al final, si los hubiera
Data$`Nombre cliente` <- trimws(Data$`Nombre cliente`)
Data$`Prestador/Vendedor` <- trimws(Data$`Prestador/Vendedor`)
#===============================================================================
# Condicional para corregir el error de AgendaPro con la gif card
Data$`Gift card` <- ifelse(Data$`Gift card` == 0, 1,Data$`Gift card`)
#===============================================================================
# Corrección del Tipo de Variable
#===============================================================================
# Vector con los nombres de las columnas que deseas convertir
columnas_a_convertir <- c( "Identificador", "Efectivo", "Total", "Otro", "Gift card", "Nequi Carlos",
"Daviplata Carlos", "Nequi Nambad", "Daviplata Nambad",
"Tarjeta de Crédito", "Tarjeta de Débito", "Cheque",
"Transferencia Bancaria", "Bold", "Precio",
"Precio de Lista")
# Convertir las columnas seleccionadas a numéricas y reemplazar NA por 0
Data[columnas_a_convertir] <- lapply(Data[columnas_a_convertir], function(columna) {
as.numeric(replace(columna, is.na(columna), 0))
})
# Convertir las columnas de chr a formato fecha para extraer el MAX y MIN.
Data$`Fecha de Pago` <- dmy_hm(Data$`Fecha de Pago`)
}, error = function(e) {
Cambio <<- 1  # Usar <<- para modificar la variable global
})
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/04. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/05. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/06. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/07. Participación Producto.R")
source("0. Codigo/Codigo por Partes/08. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/09. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
source("0. Codigo/Codigo por Partes/13. Completar Descuentos Fondo.R")
source("0. Codigo/Codigo por Partes/14. Porcentaje de los Profesionales.R")
source("0. Codigo/Codigo por Partes/15. Participación Salón.R")
source("0. Codigo/Codigo por Partes/16. Descuento Ajuste Producto.R")
source("0. Codigo/Codigo por Partes/17. Descuentos Varios a Profesionales.R")
source("0. Codigo/Codigo por Partes/18. Ajuste Partícipes.R")
source("0. Codigo/Codigo por Partes/19. Exportar Resultados.R")
source("0. Codigo/Codigo por Partes/20. Reporte Final.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/04. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/05. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/06. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/07. Participación Producto.R")
source("0. Codigo/Codigo por Partes/08. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/09. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
source("0. Codigo/Codigo por Partes/13. Completar Descuentos Fondo.R")
source("0. Codigo/Codigo por Partes/14. Porcentaje de los Profesionales.R")
source("0. Codigo/Codigo por Partes/15. Participación Salón.R")
source("0. Codigo/Codigo por Partes/16. Descuento Ajuste Producto.R")
source("0. Codigo/Codigo por Partes/17. Descuentos Varios a Profesionales.R")
source("0. Codigo/Codigo por Partes/18. Ajuste Partícipes.R")
source("0. Codigo/Codigo por Partes/19. Exportar Resultados.R")
source("0. Codigo/Codigo por Partes/20. Reporte Final.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/04. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/05. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/06. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/07. Participación Producto.R")
source("0. Codigo/Codigo por Partes/08. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/09. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
source("0. Codigo/Codigo por Partes/13. Completar Descuentos Fondo.R")
source("0. Codigo/Codigo por Partes/14. Porcentaje de los Profesionales.R")
source("0. Codigo/Codigo por Partes/15. Participación Salón.R")
source("0. Codigo/Codigo por Partes/16. Descuento Ajuste Producto.R")
source("0. Codigo/Codigo por Partes/17. Descuentos Varios a Profesionales.R")
source("0. Codigo/Codigo por Partes/18. Ajuste Partícipes.R")
source("0. Codigo/Codigo por Partes/19. Exportar Resultados.R")
source("0. Codigo/Codigo por Partes/20. Reporte Final.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
