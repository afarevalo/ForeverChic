# Verificar si el año actual ya tiene una carpeta
if (!(anio_actual %in% carpetas_existentes)) {
dir.create(file.path(ruta_data, anio_actual))
# message("Se creó la carpeta: ", anio_actual)
} #else {
#===============================================================================
# Crear Carpeta por Año
#===============================================================================
# Obtener el año actual
anio_actual <- format(Sys.Date(), "%Y")
# Listar las carpetas dentro de la ruta principal
if (!dir.exists(ruta_data)) {
dir.create(ruta_data)  # Crear la carpeta si no existe
}
#===============================================================================
# tryCatch({
#   source("0. Codigo/Codigo por Partes/1. Cargar la Base.R")
#   source("0. Codigo/Codigo por Partes/2. Nombre del Archivo Base.R")
# }, error = function(e) {
#   cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
#   stop(e)  # Detiene toda la ejecución
# })
#===============================================================================
# Obtén la lista de archivos en el directorio actual o especificado
ruta_data <- "1. Ventas Mensuales"
#===============================================================================
# Crear Carpeta por Año
#===============================================================================
# Obtener el año actual
anio_actual <- format(Sys.Date(), "%Y")
# Listar las carpetas dentro de la ruta principal
if (!dir.exists(ruta_data)) {
dir.create(ruta_data)  # Crear la carpeta si no existe
}
carpetas_existentes <- list.dirs(ruta_data, recursive = FALSE, full.names = FALSE)
# Verificar si el año actual ya tiene una carpeta
if (!(anio_actual %in% carpetas_existentes)) {
dir.create(file.path(ruta_data, anio_actual))
# message("Se creó la carpeta: ", anio_actual)
} #else {
carpetas_existentes <- list.dirs(ruta_data, recursive = FALSE, full.names = FALSE)
carpetas_existentes
#===============================================================================
# tryCatch({
#   source("0. Codigo/Codigo por Partes/1. Cargar la Base.R")
#   source("0. Codigo/Codigo por Partes/2. Nombre del Archivo Base.R")
# }, error = function(e) {
#   cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
#   stop(e)  # Detiene toda la ejecución
# })
#===============================================================================
# Obtén la lista de archivos en el directorio actual o especificado
ruta_data <- "1. Ventas Mensuales"
#===============================================================================
# Crear Carpeta por Año
#===============================================================================
# Obtener el año actual
anio_actual <- format(Sys.Date(), "%Y")
# Listar las carpetas dentro de la ruta principal
if (!dir.exists(ruta_data)) {
dir.create(ruta_data)  # Crear la carpeta si no existe
}
carpetas_existentes <- list.dirs(ruta_data, recursive = FALSE, full.names = FALSE)
# Verificar si el año actual ya tiene una carpeta
if (!(anio_actual %in% carpetas_existentes)) {
dir.create(file.path(ruta_data, anio_actual))}
# Eliminar elementos
rm(carpetas_existentes)
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/1. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/2. Nombre del Archivo Base.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
#===============================================================================
# Obtén la lista de archivos en el directorio actual o especificado
ruta_data <- "1. Ventas Mensuales"
#===============================================================================
# Crear Carpeta por Año
#===============================================================================
# Obtener el año actual
anio_actual <- format(Sys.Date(), "%Y")
# Listar las carpetas dentro de la ruta principal
if (!dir.exists(ruta_data)) {
dir.create(ruta_data)  # Crear la carpeta si no existe
}
carpetas_existentes <- list.dirs(ruta_data, recursive = FALSE, full.names = FALSE)
# Verificar si el año actual ya tiene una carpeta
if (!(anio_actual %in% carpetas_existentes)) {
dir.create(file.path(ruta_data, anio_actual))}
# Eliminar elementos
rm(carpetas_existentes)
ruta_archivo
carpetas_existentes <- list.dirs(ruta_data, recursive = FALSE, full.names = FALSE)
# Verificar si el año actual ya tiene una carpeta
if (!(anio_actual %in% carpetas_existentes)) {
dir.create(file.path(ruta_data, anio_actual))}
# Eliminar elementos
rm(carpetas_existentes)
if (!exists("Data") || is.null(Data) || nrow(Data) == 0) {
# Si "Data" no existe, está vacío o es nulo, cargar los datos
archivos_ventas <- list.files(file.path(ruta_data, anio_actual))
# Ordenar los archivos según los números
ultima_data <- archivos_ventas[length(archivos_ventas)]
# Cargar la Data
Data <- read_excel(file.path(ruta_data, anio_actual ,ultima_data))
# Extrae el ultimo nombre de la lista de archivos
nuevo_nombre <- tail(archivos_ventas, n = 1)
# Extraer el número al inicio de la cadena antes del primer "."
numero_extraido <- as.numeric(sub("^([0-9]+)\\..*", "\\1", nuevo_nombre))
numero_extraido <- sprintf("%02d", numero_extraido)
# La Data es vieja
Cambio <- 1
# Eliminar Variables
rm(ultima_data, archivos_ventas)
} else {
# Si "Data" existe y no está vacío, guardar los datos en un nuevo archivo
# Exporta la  Base de Datos
write_xlsx(Data, file.path(ruta_data, nuevo_nombre))
# Elimina la Base de Datos Original
file.remove(ruta_archivo)
}
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/1. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/2. Nombre del Archivo Base.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
#===============================================================================
# Obtén la lista de archivos en el directorio actual o especificado
ruta_data <- "1. Ventas Mensuales"
#===============================================================================
# Crear Carpeta por Año
#===============================================================================
# Obtener el año actual
anio_actual <- format(Sys.Date(), "%Y")
# Listar las carpetas dentro de la ruta principal
if (!dir.exists(ruta_data)) {
dir.create(ruta_data)  # Crear la carpeta si no existe
}
carpetas_existentes <- list.dirs(ruta_data, recursive = FALSE, full.names = FALSE)
# Verificar si el año actual ya tiene una carpeta
if (!(anio_actual %in% carpetas_existentes)) {
dir.create(file.path(ruta_data, anio_actual))}
# Eliminar elementos
rm(carpetas_existentes)
if (!exists("Data") || is.null(Data) || nrow(Data) == 0) {
# Si "Data" no existe, está vacío o es nulo, cargar los datos
archivos_ventas <- list.files(file.path(ruta_data, anio_actual))
# Ordenar los archivos según los números
ultima_data <- archivos_ventas[length(archivos_ventas)]
# Cargar la Data
Data <- read_excel(file.path(ruta_data, anio_actual ,ultima_data))
# Extrae el ultimo nombre de la lista de archivos
nuevo_nombre <- tail(archivos_ventas, n = 1)
# Extraer el número al inicio de la cadena antes del primer "."
numero_extraido <- as.numeric(sub("^([0-9]+)\\..*", "\\1", nuevo_nombre))
numero_extraido <- sprintf("%02d", numero_extraido)
# La Data es vieja
Cambio <- 1
# Eliminar Variables
rm(ultima_data, archivos_ventas)
} else {
# Si "Data" existe y no está vacío, guardar los datos en un nuevo archivo
# Exporta la  Base de Datos
write_xlsx(Data, file.path(ruta_data, nuevo_nombre))
# Elimina la Base de Datos Original
file.remove(ruta_archivo)
}
archivos_ventas
# Si "Data" no existe, está vacío o es nulo, cargar los datos
archivos_ventas <- list.files(file.path(ruta_data, anio_actual))
archivos_ventas
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/1. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/2. Nombre del Archivo Base.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
#===============================================================================
# Obtén la lista de archivos en el directorio actual o especificado
ruta_data <- "1. Ventas Mensuales"
#===============================================================================
# Crear Carpeta por Año
#===============================================================================
# Obtener el año actual
anio_actual <- format(Sys.Date(), "%Y")
# Listar las carpetas dentro de la ruta principal
if (!dir.exists(ruta_data)) {
dir.create(ruta_data)  # Crear la carpeta si no existe
}
carpetas_existentes <- list.dirs(ruta_data, recursive = FALSE, full.names = FALSE)
# Verificar si el año actual ya tiene una carpeta
if (!(anio_actual %in% carpetas_existentes)) {
dir.create(file.path(ruta_data, anio_actual))}
# Eliminar elementos
rm(carpetas_existentes)
if (!exists("Data") || is.null(Data) || nrow(Data) == 0) {
# Si "Data" no existe, está vacío o es nulo, cargar los datos
archivos_ventas <- list.files(file.path(ruta_data, anio_actual))
# Ordenar los archivos según los números
ultima_data <- archivos_ventas[length(archivos_ventas)]
# Cargar la Data
Data <- read_excel(file.path(ruta_data, anio_actual ,ultima_data))
# Extrae el ultimo nombre de la lista de archivos
nuevo_nombre <- tail(archivos_ventas, n = 1)
# Extraer el número al inicio de la cadena antes del primer "."
numero_extraido <- as.numeric(sub("^([0-9]+)\\..*", "\\1", nuevo_nombre))
numero_extraido <- sprintf("%02d", numero_extraido)
# La Data es vieja
Cambio <- 1
# Eliminar Variables
rm(ultima_data, archivos_ventas)
} else {
# Si "Data" existe y no está vacío, guardar los datos en un nuevo archivo
# Exporta la  Base de Datos
write_xlsx(Data, file.path(ruta_data, nuevo_nombre))
# Elimina la Base de Datos Original
file.remove(ruta_archivo)
}
# Elimina variables
rm(ruta_archivo, ruta_data)
# Lista de Profesionales
Base_Profesionales <- read_excel("0. Codigo/Info.xlsx", sheet = "0. Profesionales")
Base_Profesionales <- as.vector(Base_Profesionales[[1]])
Base_Profesionales
# Crear una lista de vectores desde el archivo Excel
sheets <- c("1. Tocador", "2. Spa", "3. Depilacion", "4. Bac",
"5. Colorimetria", "6. Venta", "7. Maquillaje",
"8. Maquillaje Salon", "9. Accesorios", "10. Queratina",
"11. TermoCut", "12. Venta N", "13. Companeros N", "14. Masaje")
tipos <- c("Tocador", "Spa", "Depilacion", "Bac",
"Colorimetria", "Venta", "Maquillaje",
"Maquillaje_S", "Accesorios", "Queratina",
"TermoCut", "Venta_N", "Compa_N", "Masaje")
# Leer todas las hojas y guardar en una lista de vectores
servicios <- lapply(seq_along(sheets), function(i) {
list(tipo = tipos[i], items = read_excel("0. Codigo/Info.xlsx",
sheet = sheets[i])[[1]])
})
# Inicialización de la variable Tipo
Data$Tipo <- "NA"
# Clasificación de los servicios
Data$Tipo <- ifelse(Data$`Prestador/Vendedor` == "Nydia Gamba" &
!(Data$`Servicio/Producto` %in% servicios[[12]]$items), "Alianza",
sapply(Data$`Servicio/Producto`, function(producto) {
match <- sapply(servicios, function(servicio) producto %in%
servicio$items)
if (any(match)) servicios[[which(match)]]$tipo
else if (producto == "Propina desde") "Propina"
else NA
}))
View(Data)
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/1. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/2. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/3. Agregar y Eliminar la Base.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
View(Data)
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/1. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/2. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/3. Agregar y Eliminar la Base.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
# Lista de Profesionales
Base_Profesionales <- read_excel("0. Codigo/Info.xlsx", sheet = "0. Profesionales")
Base_Profesionales <- as.vector(Base_Profesionales[[1]])
# Crear una lista de vectores desde el archivo Excel
sheets <- c("1. Tocador", "2. Spa", "3. Depilacion", "4. Bac",
"5. Colorimetria", "6. Venta", "7. Maquillaje",
"8. Maquillaje Salon", "9. Accesorios", "10. Queratina",
"11. TermoCut", "12. Venta N", "13. Companeros N", "14. Masaje")
tipos <- c("Tocador", "Spa", "Depilacion", "Bac",
"Colorimetria", "Venta", "Maquillaje",
"Maquillaje_S", "Accesorios", "Queratina",
"TermoCut", "Venta_N", "Compa_N", "Masaje")
# Leer todas las hojas y guardar en una lista de vectores
servicios <- lapply(seq_along(sheets), function(i) {
list(tipo = tipos[i], items = read_excel("0. Codigo/Info.xlsx",
sheet = sheets[i])[[1]])
})
# Inicialización de la variable Tipo
Data$Tipo <- "NA"
# Clasificación de los servicios
Data$Tipo <- ifelse(Data$`Prestador/Vendedor` == "Nydia Gamba" &
!(Data$`Servicio/Producto` %in% servicios[[12]]$items), "Alianza",
sapply(Data$`Servicio/Producto`, function(producto) {
match <- sapply(servicios, function(servicio) producto %in%
servicio$items)
if (any(match)) servicios[[which(match)]]$tipo
else if (producto == "Propina desde") "Propina"
else NA
}))
# Clasificación de los servicios
Data$Tipo <- ifelse(Data$`Prestador/Vendedor` == "Nydia Gamba" &
!(Data$`Servicio/Producto` == "Propina desde") &
!(Data$`Servicio/Producto` %in% servicios[[12]]$items), "Alianza",
sapply(Data$`Servicio/Producto`, function(producto) {
match <- sapply(servicios, function(servicio) producto %in%
servicio$items)
if (any(match)) servicios[[which(match)]]$tipo
else if (producto == "Propina desde") "Propina"
else NA
}))
# Clasifica los Bonos
Data$Tipo <- ifelse(Data$`Servicio/Producto` == "Bonos desde", "Bonos", Data$Tipo)
rm(servicios, sheets, tipos)
# Verificar si hay valores NA en la variable "Tipo"
if (any(is.na(Data$Tipo))) {
# Extraer los servicios/productos sin clasificar
servicios_sin_clasificar <- Data$`Servicio/Producto`[is.na(Data$Tipo)]
# Mostrar mensaje de alerta con lista de servicios sin clasificar
cat("\n⚠️  ERROR: Servicios sin clasificar en la base de datos:\n")
print(servicios_sin_clasificar)
# Detener ejecución completamente
stop("Ejecución detenida: Existen servicios sin clasificar en la variable 'Tipo'.")
}
rm(servicios, sheets, tipos, nuevo_nombre)
Base_Profesionales
# Vector de Nombres de Partícipes FOREVER para manejo del Servicio a los Socios
participes <- c("Andres Arevalo", "Andres Arévalo", "Andrés Arevalo",
"Andrés Arévalo", "Carlitos Arevalo", "Carlos Arevalo",
"Elsa Arevalo", "Sandra Mogollon", "Sandra Mogollón",
"Carlos Arévalo")
# Renombrar a los Partícipes para agruparlos en una sola categoria
Data$`Nombre cliente` <- ifelse(Data$`Nombre cliente` %in% participes & Data$Precio == 0,
"Partícipes FOREVER", Data$`Nombre cliente`)
# Variable Modificado
Data$Modificado <- NA
# Se modificara el la Variable Precio
Data$Modificado <- ifelse(Data$`Nombre cliente` == "Partícipes FOREVER" & Data$Precio == 0,
1, NA)
# Concicional Para recalificar a los socios
Data$Precio <- ifelse(Data$`Nombre cliente` == "Partícipes FOREVER" & Data$Precio == 0,
Data$`Precio de Lista` , Data$Precio)
#===============================================================================
# Manejo Regalos de Participes a Clientes
Data$Modificado <- ifelse(Data$Precio == 0 & Data$Descuento == "100.0 %" &
!(Data$`Nombre cliente` %in% Base_Profesionales) , 1, Data$Modificado)
Data$Precio <- ifelse(Data$Precio == 0 & Data$Descuento == "100.0 %" &
!(Data$`Nombre cliente` %in% Base_Profesionales) ,
Data$`Precio de Lista`, Data$Precio)
#===============================================================================
# Eliminar vector
rm(participes)
# Limpiar el entorno
rm(list = ls())
cat("\014")
# Load relevant packages
require(pacman)
p_load(tidyverse,fixest, stargazer,knitr,kableExtra,jtools,ggstance,broom,broom.mixed,skimr)
?mod
#===============================================================================
# Carga y exploración del conjunto de datos
#===============================================================================
# Import dataset
load(url("https://github.com/ignaciomsarmiento/datasets/blob/main/bike.RData?raw=true"))
str(bike)
names(bike)
#select variables used in he analysis
bike.features.of.interest = c('season','holiday', 'workingday', 'weathersit', 'temp', 'hum', 'windspeed', 'days_since_2011')
X <- bike %>% select(bike.features.of.interest)
y <- bike %>%
select(cnt)  %>%
rename(y=cnt)
dat = cbind(X, y)
skim(dat)
rm(X,Y,bike,y)
?mod
?lm
lm
?lm
mod <- lm(y ~ ., data = dat, x = TRUE)
summary(mod)
mod
summary(mod)
View(dat)
unique(dat$weathersit)
unique(dat$season)
ggplot(dat, aes(y = y, x = temp))
ggplot(dat, aes(y = y, x = temp)) + geom_point()
ggplot(dat, aes(y = y, x = temp)) + geom_point() +  stat_smooth(formula = 'y ~ x', method = lm, se = FALSE,
size = 1)
View(dat)
# Limpiar el entorno
rm(list = ls())
cat("\014")
# Load relevant packages
require(pacman)
p_load(tidyverse,fixest, stargazer,knitr,kableExtra,jtools,ggstance,broom,broom.mixed,skimr)
#===============================================================================
# Carga y exploración del conjunto de datos
#===============================================================================
# Import dataset
load(url("https://github.com/ignaciomsarmiento/datasets/blob/main/bike.RData?raw=true"))
str(bike)
names(bike)
#select variables used in he analysis
bike.features.of.interest = c('season','holiday', 'workingday', 'weathersit', 'temp', 'hum', 'windspeed', 'days_since_2011')
View(bike)
X <- bike %>% select(bike.features.of.interest)
y <- bike %>%
select(cnt)  %>%
rename(y=cnt)
dat = cbind(X, y)
skim(dat)
rm(X,bike,y)
mod <- lm(y ~ ., data = dat, x = TRUE)
mod <- lm(y ~ ., data = dat, x = TRUE)
modglm <- glm(y ~ ., data = dat)
modfe <- feols(y ~ season+holiday+workingday+weathersit+temp+hum+windspeed+days_since_2011, data = dat)
# visualizar los resultados
stargazer(mod,modglm, type="text")
summary(modfe)
# Muestra en la Ventana de ´View´ los datos, es más amigable
lm_summary <- summary(mod)$coefficients
lm_summary_print  <-  lm_summary
lm_summary_print[,'t value'] <-  abs(lm_summary_print[,'t value'])
pretty_rownames = function(rnames){
rnames = gsub('^`', '', rnames)
rnames = gsub('`$', '', rnames)
rnames = gsub('`', ':', rnames)
rnames
}
kable(lm_summary_print[,c('Estimate', 'Std. Error', 't value')], digits = 1, col.names = c('Weight', 'SE', "|t|"), booktabs = TRUE, center = TRUE) %>% kable_styling(position = "center")
View(dat)
# Biblioteca tidyR
# Output as a dataframe
tidy(mod)
# Errores Estándar Robustos:
# Para corregir la Heterocedasticidad -> Var(e_i|X) != 0
# Los errores estándar robustos son una forma de corregir este problema.
# Se calculan de manera que sean menos sensibles a la heterocedasticidad.
# El más común es"HC1"
cat("\014")
summ(mod)
summ(mod, robust = "HC1")
# Para obtener coeficientes estandarizados/escalados:
summ(mod, scale = TRUE)
ggplot(dat, aes(y = y, x = temp)) +
geom_point() + # add points
stat_smooth(formula = 'y ~ x', method = lm, se = FALSE,
size = 1) +  #fit the linear model in the plot
theme_bw() + #black and white theme
labs(x = "Temperature in Celsius",
y = "Number of bicycles rented",
title = "Predicted values with changes in temperature") # labels
# Building the plot by ourselves
coefs = data.frame(
Features = rownames(lm_summary),
Estimate = lm_summary[,'Estimate'],
std_error = lm_summary[,'Std. Error']
)
# La función qnorm() encuentra el valor límite que determina el área
# bajo la curva de densidad normal antes de alfa/2.
alpha = 0.05 # 95% Confidence Interval
coefs$lower = coefs$Estimate - qnorm(alpha/2) * coefs$std_error
coefs$upper = coefs$Estimate + qnorm(alpha/2) * coefs$std_error
coefs = coefs[!(coefs$Features == '(Intercept)'),]
# Grafica de los CI
ggplot(coefs) +
geom_vline(xintercept = 0, linetype = 4) + #adds a vertical line at zero
geom_point(aes(x = Estimate, y = Features)) + #point estimate
geom_segment(aes(y = Features, yend = Features, x = lower, xend = upper),
arrow = arrow(angle = 90, ends = 'both',
length = unit(0.1, 'cm'))) + #segment representing the CI
labs(x = 'Coeffienient estimate') +
theme_bw()
