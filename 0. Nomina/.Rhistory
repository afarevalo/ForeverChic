rm(archivos_ventas, numeros, validos)
# Comparar la parte extraída con la cadena_reporte
if (texto_extraido == cadena_reporte & Cambio == 0) {
# Si son iguales, conservar el mismo archivo
nuevo_nombre <- ultimo_archivo
Cambio <- 1
rm(cadena_reporte, texto_extraido, ultimo_archivo)
} else {
# Si son diferentes, incrementar el número y generar un nuevo nombre
numero_extraido <- numero_extraido + 1
numero_extraido <- sprintf("%02d", numero_extraido)
nuevo_nombre <- paste0(numero_extraido, cadena_reporte)
rm(cadena_reporte, texto_extraido)
}
}
#===============================================================================
# Arreglar el formato de la Fecha para extraer el MAX y MIN.
Data$`Fecha de Pago` <- format(as.POSIXct(Data$`Fecha de Pago`, tz = "UTC"),
format = "%d/%m/%Y %H:%M")
}
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
# Librerias del Proyecto
#===============================================================================
# tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
# Librerias del Proyecto
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/04. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/05. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/06. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/07. Participación Producto.R")
source("0. Codigo/Codigo por Partes/08. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/09. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
source("0. Codigo/Codigo por Partes/13. Completar Descuentos Fondo.R")
source("0. Codigo/Codigo por Partes/14. Porcentaje de los Profesionales.R")
source("0. Codigo/Codigo por Partes/15. Participación Salón.R")
source("0. Codigo/Codigo por Partes/16. Descuento Ajuste Producto.R")
source("0. Codigo/Codigo por Partes/17. Descuentos Varios a Profesionales.R")
source("0. Codigo/Codigo por Partes/18. Ajuste Partícipes.R")
source("0. Codigo/Codigo por Partes/19. Exportar Resultados.R")
source("0. Codigo/Codigo por Partes/20. Reporte Final.R")
source("0. Codigo/Codigo por Partes/21. Consolidado.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
# Librerias del Proyecto
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/04. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/05. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/06. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/07. Participación Producto.R")
source("0. Codigo/Codigo por Partes/08. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/09. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
source("0. Codigo/Codigo por Partes/13. Completar Descuentos Fondo.R")
source("0. Codigo/Codigo por Partes/14. Porcentaje de los Profesionales.R")
source("0. Codigo/Codigo por Partes/15. Participación Salón.R")
source("0. Codigo/Codigo por Partes/16. Descuento Ajuste Producto.R")
source("0. Codigo/Codigo por Partes/17. Descuentos Varios a Profesionales.R")
source("0. Codigo/Codigo por Partes/18. Ajuste Partícipes.R")
source("0. Codigo/Codigo por Partes/19. Exportar Resultados.R")
source("0. Codigo/Codigo por Partes/20. Reporte Final.R")
source("0. Codigo/Codigo por Partes/21. Consolidado.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
#===============================================================================
# Librerias del Proyecto
#===============================================================================
# tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
View(Data)
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/04. Clasificacion Tipo de Servicio.R")
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
# Lista de Profesionales
Base_Profesionales <- read_excel("0. Codigo/Info.xlsx", sheet = "0. Profesionales")
Base_Profesionales <- as.vector(Base_Profesionales[[1]])
# Crear una lista de vectores desde el archivo Excel
sheets <- c("1. Tocador", "2. Spa", "3. Depilacion", "4. Bac",
"5. Colorimetria", "6. Venta", "7. Maquillaje",
"8. Maquillaje Salon", "9. Accesorios", "10. Queratina",
"11. TermoCut", "12. Venta N", "13. Companeros N", "14. Masaje",
"15. Otros", "16. Leydy")
tipos <- c("Tocador", "Spa", "Depilacion", "Bac",
"Colorimetria", "Venta", "Maquillaje",
"Maquillaje_S", "Accesorios", "Queratina",
"TermoCut", "Venta_N", "Compa_N", "Masaje", "Otros", "Alianza")
# Leer todas las hojas y guardar en una lista de vectores
servicios <- lapply(seq_along(sheets), function(i) {
list(tipo = tipos[i], items = read_excel("0. Codigo/Info.xlsx",
sheet = sheets[i])[[1]])
})
# Inicialización de la variable Tipo
Data$Tipo <- "NA"
# Clasificación de los servicios
Data$Tipo <- ifelse(Data$`Prestador/Vendedor` == "Nydia Gamba" &
!(Data$`Servicio/Producto` == "Propina desde") &
!(Data$`Servicio/Producto` %in% servicios[[12]]$items), "Alianza",
sapply(Data$`Servicio/Producto`, function(producto) {
match <- sapply(servicios, function(servicio) producto %in%
servicio$items)
if (any(match)) servicios[[which(match)]]$tipo
else if (producto == "Propina desde") "Propina"
else NA
}))
rm(servicios, sheets, tipos)
#===============================================================================
# Correcion de servicios - 16. Leydy
leydy <- read_excel("0. Codigo/Info.xlsx", sheet = "16. Leydy")
leydy <- as.vector(leydy[[1]])
Data$`Prestador/Vendedor` <- ifelse(Data$`Prestador/Vendedor` == "Sandra Mogollon" &
Data$`Servicio/Producto` %in% leydy, "Nydia Gamba",
Data$`Prestador/Vendedor`)
#===============================================================================
# Correcion de servicios - 16. Leydy
leydy <- read_excel("0. Codigo/Info.xlsx", sheet = "16. Leydy")
View(leydy)
leydy <- as.vector(leydy[[1]])
Data$`Prestador/Vendedor` <- ifelse(Data$`Prestador/Vendedor` == "Sandra Mogollon" &
Data$`Servicio/Producto` %in% leydy, "Nydia Gamba",
Data$`Prestador/Vendedor`)
rm(leydy)
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
# Lista de Profesionales
Base_Profesionales <- read_excel("0. Codigo/Info.xlsx", sheet = "0. Profesionales")
Base_Profesionales <- as.vector(Base_Profesionales[[1]])
# Crear una lista de vectores desde el archivo Excel
sheets <- c("1. Tocador", "2. Spa", "3. Depilacion", "4. Bac",
"5. Colorimetria", "6. Venta", "7. Maquillaje",
"8. Maquillaje Salon", "9. Accesorios", "10. Queratina",
"11. TermoCut", "12. Venta N", "13. Companeros N", "14. Masaje",
"15. Otros", "16. Leydy")
tipos <- c("Tocador", "Spa", "Depilacion", "Bac",
"Colorimetria", "Venta", "Maquillaje",
"Maquillaje_S", "Accesorios", "Queratina",
"TermoCut", "Venta_N", "Compa_N", "Masaje", "Otros", "Alianza")
# Leer todas las hojas y guardar en una lista de vectores
servicios <- lapply(seq_along(sheets), function(i) {
list(tipo = tipos[i], items = read_excel("0. Codigo/Info.xlsx",
sheet = sheets[i])[[1]])
})
# Inicialización de la variable Tipo
Data$Tipo <- "NA"
# Clasificación de los servicios
Data$Tipo <- ifelse(Data$`Prestador/Vendedor` == "Nydia Gamba" &
!(Data$`Servicio/Producto` == "Propina desde") &
!(Data$`Servicio/Producto` %in% servicios[[12]]$items), "Alianza",
sapply(Data$`Servicio/Producto`, function(producto) {
match <- sapply(servicios, function(servicio) producto %in%
servicio$items)
if (any(match)) servicios[[which(match)]]$tipo
else if (producto == "Propina desde") "Propina"
else NA
}))
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
View(Data)
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
View(Data)
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
View(Data)
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
# Librerias del Proyecto
library(readxl)
library(dplyr)
library(writexl)
library(rio)
library(openxlsx)
library(stringr)
library(lubridate)
library(fs)
library(tidyr)
# Input del Usuario
ruta_archivo <- "C:/Users/windows/Downloads/reporte_de_ventas_abl_123.xlsx"
# Inicializar la Variable ´Cambio´
Cambio <- NA
# Intentar cargar la base de datos o retener el error
tryCatch({
# Leer el archivo
Data <- read_excel(ruta_archivo, sheet = "Produccion v2")
Cambio <<- 0
# Soluciona el problema de las filas iniciales
colnames(Data) <- Data[1, ]
Data <- Data[-c(1:1),]
rownames(Data) <- NULL
# Limpiar datos
Data <- Data %>% select("Identificador","Fecha de Pago","Nombre cliente",
"Servicio/Producto","Prestador/Vendedor","Precio de Lista",
"Precio", "Total","Descuento","Efectivo","Tarjeta de Crédito",
"Tarjeta de Débito","Cheque","Otro","Gift card",
"Transferencia Bancaria","Nequi Carlos","Daviplata Carlos",
"Nequi Nambad","Daviplata Nambad","Bold")
# Eliminar espacios múltiples
Data$`Nombre cliente` <- gsub("\\s+", " ", Data$`Nombre cliente`)
Data$`Prestador/Vendedor` <- gsub("\\s+", " ", Data$`Prestador/Vendedor`)
# Eliminar espacios al inicio y al final, si los hubiera
Data$`Nombre cliente` <- trimws(Data$`Nombre cliente`)
Data$`Prestador/Vendedor` <- trimws(Data$`Prestador/Vendedor`)
#===============================================================================
# Condicional para corregir el error de AgendaPro con la gif card
Data$`Gift card` <- ifelse(Data$`Gift card` == 0, 1,Data$`Gift card`)
#===============================================================================
# Corrección del Tipo de Variable
#===============================================================================
# Vector con los nombres de las columnas que deseas convertir
columnas_a_convertir <- c( "Identificador", "Efectivo", "Total", "Otro", "Gift card", "Nequi Carlos",
"Daviplata Carlos", "Nequi Nambad", "Daviplata Nambad",
"Tarjeta de Crédito", "Tarjeta de Débito", "Cheque",
"Transferencia Bancaria", "Bold", "Precio",
"Precio de Lista")
# Convertir las columnas seleccionadas a numéricas y reemplazar NA por 0
Data[columnas_a_convertir] <- lapply(Data[columnas_a_convertir], function(columna) {
as.numeric(replace(columna, is.na(columna), 0))
})
# Convertir las columnas de chr a formato fecha para extraer el MAX y MIN.
Data$`Fecha de Pago` <- dmy_hm(Data$`Fecha de Pago`)
}, error = function(e) {
Cambio <<- 1  # Usar <<- para modificar la variable global
})
# Eliminar Data
if (Cambio == 0) {
rm(columnas_a_convertir)
}
View(Data)
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
View(Data)
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
# Librerias del Proyecto
#===============================================================================
# tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
View(Data)
source("0. Codigo/Codigo por Partes/04. Clasificacion Tipo de Servicio.R")
View(Data)
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
# Librerias del Proyecto
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/04. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/05. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/06. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/07. Participación Producto.R")
source("0. Codigo/Codigo por Partes/08. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/09. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
source("0. Codigo/Codigo por Partes/13. Completar Descuentos Fondo.R")
source("0. Codigo/Codigo por Partes/14. Porcentaje de los Profesionales.R")
source("0. Codigo/Codigo por Partes/15. Participación Salón.R")
source("0. Codigo/Codigo por Partes/16. Descuento Ajuste Producto.R")
source("0. Codigo/Codigo por Partes/17. Descuentos Varios a Profesionales.R")
source("0. Codigo/Codigo por Partes/18. Ajuste Partícipes.R")
source("0. Codigo/Codigo por Partes/19. Exportar Resultados.R")
source("0. Codigo/Codigo por Partes/20. Reporte Final.R")
source("0. Codigo/Codigo por Partes/21. Consolidado.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
# Librerias del Proyecto
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/01. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/02. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/03. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/04. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/05. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/06. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/07. Participación Producto.R")
source("0. Codigo/Codigo por Partes/08. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/09. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
source("0. Codigo/Codigo por Partes/13. Completar Descuentos Fondo.R")
source("0. Codigo/Codigo por Partes/14. Porcentaje de los Profesionales.R")
source("0. Codigo/Codigo por Partes/15. Participación Salón.R")
source("0. Codigo/Codigo por Partes/16. Descuento Ajuste Producto.R")
source("0. Codigo/Codigo por Partes/17. Descuentos Varios a Profesionales.R")
source("0. Codigo/Codigo por Partes/18. Ajuste Partícipes.R")
source("0. Codigo/Codigo por Partes/19. Exportar Resultados.R")
source("0. Codigo/Codigo por Partes/20. Reporte Final.R")
source("0. Codigo/Codigo por Partes/21. Consolidado.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
tryCatch({
source("0. Codigo/Codigo por Partes/1. Cargar la Base.R")
source("0. Codigo/Codigo por Partes/2. Nombre del Archivo Base.R")
source("0. Codigo/Codigo por Partes/3. Agregar y Eliminar la Base.R")
source("0. Codigo/Codigo por Partes/4. Clasificacion Tipo de Servicio.R")
source("0. Codigo/Codigo por Partes/5. Manejo Partícipes.R")
source("0. Codigo/Codigo por Partes/6. Costos de transacción.R")
source("0. Codigo/Codigo por Partes/7. Participación Producto.R")
source("0. Codigo/Codigo por Partes/8. Generar la Base de Retardos.R")
source("0. Codigo/Codigo por Partes/9. Generar la Base de Descuentos.R")
source("0. Codigo/Codigo por Partes/10. Generar la Base de Color.R")
source("0. Codigo/Codigo por Partes/11. Completar Base con Color.R")
source("0. Codigo/Codigo por Partes/12. Completar Base de Retardos.R")
}, error = function(e) {
cat("\n⛔ Se ha detectado un error. Deteniendo ejecución.\n")
stop(e)  # Detiene toda la ejecución
})
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
source("0. Codigo/Codigo por Partes/1. Cargar la Base.R")
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
# Librerias del Proyecto
library(readxl)
library(dplyr)
library(writexl)
library(rio)
library(openxlsx)
library(stringr)
library(lubridate)
library(fs)
library(tidyr)
# Input del Usuario
ruta_archivo <- "C:/Users/windows/Downloads/reporte_de_ventas_abl_123.xlsx"
# Inicializar la Variable ´Cambio´
Cambio <- NA
# Intentar cargar la base de datos o retener el error
tryCatch({
# Leer el archivo
Data <- read_excel(ruta_archivo, sheet = "Produccion v2")
Cambio <<- 0
# Soluciona el problema de las filas iniciales
colnames(Data) <- Data[1, ]
Data <- Data[-c(1:1),]
rownames(Data) <- NULL
# Limpiar datos
Data <- Data %>% select("Identificador","Fecha de Pago","Nombre cliente",
"Servicio/Producto","Prestador/Vendedor","Precio de Lista",
"Precio", "Total","Descuento","Efectivo","Tarjeta de Crédito",
"Tarjeta de Débito","Cheque","Otro","Gift card",
"Transferencia Bancaria","Nequi Carlos","Daviplata Carlos",
"Nequi Nambad","Daviplata Nambad","Bold")
# Eliminar espacios múltiples
Data$`Nombre cliente` <- gsub("\\s+", " ", Data$`Nombre cliente`)
Data$`Prestador/Vendedor` <- gsub("\\s+", " ", Data$`Prestador/Vendedor`)
# Eliminar espacios al inicio y al final, si los hubiera
Data$`Nombre cliente` <- trimws(Data$`Nombre cliente`)
Data$`Prestador/Vendedor` <- trimws(Data$`Prestador/Vendedor`)
#===============================================================================
# Condicional para corregir el error de AgendaPro con la gif card
Data$`Gift card` <- ifelse(Data$`Gift card` == 0, 1,Data$`Gift card`)
#===============================================================================
# Corrección del Tipo de Variable
#===============================================================================
# Vector con los nombres de las columnas que deseas convertir
columnas_a_convertir <- c( "Identificador", "Efectivo", "Total", "Otro", "Gift card", "Nequi Carlos",
"Daviplata Carlos", "Nequi Nambad", "Daviplata Nambad",
"Tarjeta de Crédito", "Tarjeta de Débito", "Cheque",
"Transferencia Bancaria", "Bold", "Precio",
"Precio de Lista")
# Convertir las columnas seleccionadas a numéricas y reemplazar NA por 0
Data[columnas_a_convertir] <- lapply(Data[columnas_a_convertir], function(columna) {
as.numeric(replace(columna, is.na(columna), 0))
})
# Convertir las columnas de chr a formato fecha para extraer el MAX y MIN.
Data$`Fecha de Pago` <- dmy_hm(Data$`Fecha de Pago`)
}, error = function(e) {
Cambio <<- 1  # Usar <<- para modificar la variable global
})
# Eliminar Data
if (Cambio == 0) {
rm(columnas_a_convertir)
}
#===============================================================================
# Limpiar el entorno
rm(list = ls())
cat("\014")
#===============================================================================
# tryCatch({
source("0. Codigo/Codigo por Partes/1. Cargar la Base.R")
#===============================================================================
# Limpiar el entorno
rm(list = ls())
